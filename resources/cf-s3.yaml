AWSTemplateFormatVersion: '2010-09-09'
Description: This template deploys S3 buckets
Parameters:
  Environment:
    Description: what environment we are deploying
    Type: String
    AllowedPattern: (dev|prod)
  DomainName:
    Description: Domain name for your API (example.com)
    Type: String
  ApiPrefixName:
    Description: Domain name for your API (api)
    Type: String

Conditions:
  CreateDevResources: !Equals
    - !Ref 'Environment'
    - dev

Mappings:
  RegionMap:
    us-east-1:
      S3HostedZoneID: Z3AQBSTGFYJSTF
      S3AliasTarget: s3-website-us-east-1.amazonaws.com
    us-east-2:
      S3HostedZoneID: Z2O1EMRO9K5GLX
      S3AliasTarget: s3-website.us-east-2.amazonaws.com
    us-west-1:
      S3HostedZoneID: Z2F56UZL2M1ACD
      S3AliasTarget: s3-website-us-west-1.amazonaws.com
    us-west-2:
      S3HostedZoneID: Z3BJ6K6RIION7M
      S3AliasTarget: s3-website-us-west-2.amazonaws.com
    ca-central-1:
      S3HostedZoneID: Z1QDHH18159H29 
      S3AliasTarget: s3-website.ca-central-1.amazonaws.com
    ap-south-1:
      S3HostedZoneID: Z11RGJOFQNVJUP
      S3AliasTarget: s3-website.ap-south-1.amazonaws.com
    ap-northeast-2:
      S3HostedZoneID: Z3W03O7B5YMIYP
      S3AliasTarget: s3-website.ap-northeast-2.amazonaws.com
    ap-southeast-1:
      S3HostedZoneID: Z3O0J2DXBE1FTB
      S3AliasTarget: s3-website-ap-southeast-1.amazonaws.com
    ap-southeast-2:
      S3HostedZoneID: Z1WCIGYICN2BYD
      S3AliasTarget: s3-website-ap-southeast-2.amazonaws.com
    ap-northeast-1:
      S3HostedZoneID: Z2M4EHUR26P7ZW
      S3AliasTarget: s3-website-ap-northeast-1.amazonaws.com
    eu-central-1:
      S3HostedZoneID: Z21DNDUVLTQW6Q
      S3AliasTarget: s3-website.eu-central-1.amazonaws.com
    eu-west-1:
      S3HostedZoneID: Z1BKCTXD74EZPE
      S3AliasTarget: s3-website-eu-west-1.amazonaws.com
    eu-west-2:
      S3HostedZoneID: Z3GKZC51ZF0DB4
      S3AliasTarget: s3-website.eu-west-2.amazonaws.com
    sa-east-1:
      S3HostedZoneID: Z31GFT0UA1I2HV
      S3AliasTarget: s3-website-sa-east-1.amazonaws.com

Resources:

  ProcessingLambdaPermission:
    Type: AWS::Lambda::Permission
    Description: upload lambda permissions
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref TexUploadBinaryBucketLambda
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::*'
      SourceAccount: !Ref AWS::AccountId
      
  TexUploadBinaryBucketLambda:
    Type: AWS::Lambda::Function
    Description: Upload event processing lambda
    Properties:
      FunctionName: !Sub 's3-binary-upload-processing-${Environment}'      
      Code: "../lambdas/S3"
      Handler: UploadS3Object.handler
      Layers: 
        - !ImportValue 
            Fn::Sub: 'postgres-log-layer-arn-${Environment}'
      Runtime: nodejs12.x
      Role: !ImportValue 
        Fn::Sub: 's3-lambda-role-arn-${Environment}'
      MemorySize: 128
      Timeout: 120
      Environment:
        Variables:
          Environment: !Ref 'Environment'
      Tags:
        - Key: "Environment"
          Value: !Ref 'Environment'

  TexS3BucketStatics:
    Type: AWS::S3::Bucket
    Description: frontend statics storage
    Properties:
      BucketName: !Sub 'tex-statics-${Environment}'
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      Tags:
        - Key: creator
          Value: mz
        - Key: purpose
          Value: frontend statics storage
        - Key: environment
          Value: !Ref 'Environment'
      VersioningConfiguration:
        Status: Suspended
    DeletionPolicy: Retain

  TexS3BucketStaticsPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref 'TexS3BucketStatics'
                - /*
      Bucket: !Ref 'TexS3BucketStatics'

  TexS3BucketBinaries:
    Type: AWS::S3::Bucket
    Description: customers binary downloadables storage. Access with presigned URL
      only. After ObjectCreated calls lambda to finish upload operation
    DependsOn: TexUploadBinaryBucketLambda
    Properties:
      BucketName: !Sub 'tex-binary-${Environment}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt 'TexUploadBinaryBucketLambda.Arn'
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - '*'
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: error.html
        RoutingRules:
          - RedirectRule:
              HostName: !Sub ${ApiPrefixName}.${DomainName}
              HttpRedirectCode: '302'
              Protocol: https
              ReplaceKeyPrefixWith: imageresize/
            RoutingRuleCondition:
              HttpErrorCodeReturnedEquals: '403'
      Tags:
        - Key: creator
          Value: mz
        - Key: environment
          Value: !Ref 'Environment'
        - Key: purpose
          Value: customers binary downloadables storage. Access with presigned URL
            only
      VersioningConfiguration:
        Status: Suspended
  TexS3BucketBinariesPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref 'TexS3BucketBinaries'
                - /*
            Condition:
              StringEquals:
                s3:ExistingObjectTag/public: 'yes'
      Bucket: !Ref 'TexS3BucketBinaries'
  cleanupStaticsBucketOnDelete:
    Type: Custom::cleanupbucket1
    Condition: CreateDevResources
    DependsOn: TexS3BucketStatics
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: TexEmptyBucketLambda
      BucketName: !Ref 'TexS3BucketStatics'
  cleanupLambdaBucketOnDelete:
    Type: Custom::cleanupbucket2
    Condition: CreateDevResources
    DependsOn: TexS3BucketLambdas
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: TexEmptyBucketLambda
      BucketName: !Ref 'TexS3BucketLambdas'
  cleanupBinaryBucketOnDelete:
    Type: Custom::cleanupbucket3
    Condition: CreateDevResources
    DependsOn: TexS3BucketBinaries
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: TexEmptyBucketLambda
      BucketName: !Ref 'TexS3BucketBinaries'

#  binaryBucketDNS:
#    Type: AWS::Route53::RecordSetGroup
#    Properties:
#      HostedZoneName: !Sub 
#          - ${Domain}.
#          - Domain: !Ref DomainName
#      Comment: Zone apex alias.
#      RecordSets:
#      - 
#        Name: !Sub
#            - binary-${Environment}.${Domain}
#            - Domain: !Ref DomainName
#        Type: A
#        AliasTarget:
#          HostedZoneId: !FindInMap [ RegionMap, !Ref 'AWS::Region', S3HostedZoneID]
#          DNSName: !FindInMap [ RegionMap, !Ref 'AWS::Region', S3AliasTarget]

Outputs:
  WebsiteURL:
    Value: !GetAtt 'TexS3BucketStatics.WebsiteURL'
    Export:
      Name: !Sub 'TexWebsiteURL-${Environment}'
    Description: URL for website hosted on S3
  S3BucketStaticsName:
    Value: !GetAtt 'TexS3BucketStatics.DomainName'
    Export:
      Name: !Sub 'TexS3BucketStatics-${Environment}'
    Description: name of S3 bucket for statics
  S3BucketStaticsSecureURL:
    Value: !Join
      - ''
      - - https://
        - !GetAtt 'TexS3BucketStatics.DomainName'
    Export:
      Name: !Sub 'TexS3BucketStaticsSecureURL-${Environment}'
    Description: Name of S3 bucket to hold website content
  S3BucketBinariesSecureURL:
    Value: !Join
      - ''
      - - https://
        - !GetAtt 'TexS3BucketBinaries.DomainName'
    Export:
      Name: !Sub 'TexS3BucketBinariesSecureURL-${Environment}'
    Description: URL of S3 bucket to hold user downloadables
  BinariesWebsiteURL:
    Value: !GetAtt 'TexS3BucketBinaries.WebsiteURL'
    Export:
      Name: !Sub 'TexBinariesWebsiteURL-${Environment}'
    Description: URL for website hosted on S3
  S3BucketBinariesBucketName:
    Value: !Ref 'TexS3BucketBinaries'
    Export:
      Name: !Sub 'TexS3BucketBinariesBucketName-${Environment}'
    Description: Name of S3 bucket to hold user downloadables
  S3BucketBinariesDomain:
    Value: !Sub 'binary-${Environment}.${DomainName}'
    Export:
      Name: !Sub 'TexS3BucketBinariesDomain-${Environment}'
    Description: Public domaon of binaries S3 bucket
