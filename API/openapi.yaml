openapi: '3.0.0'
info:
  description: Openexpo API defintion
  version: 1.0.0
  title: Swagger Openexpo
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: mcseemz+github@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

servers:
  - url: http://dev.localhost/v1
    description: dev server
    variables:
      customerId:
        default: demo
        description: Customer ID assigned by the service provider
      port:
        enum:
          - '443'
          - '8443'
        default: '443'

tags:
  - name: user
    description: Operations about user
    externalDocs:
      description: API
      url: 'http://swagger.io'
  - name: role
    description: internal role management
  - name: personnel invitation
    description: Invitation of person into company
  - name: company
    description: Operations with company resources
  - name: company personnel
    description: Operations with personnel
  - name: stand invitation
    description: stand-event negotiations
  - name: stand
    description: Operations with stand
  - name: stand materials
    description: operations with uploadables/downloadables
  - name: event
    description: Operations with event
  - name: activity
    description: Schedule operations
  - name: meeting
    description: external activities management
  - name: capability
    description: capabilites management. Capabilities are measurable event resources
  - name: chat
    description: Chat operations
  - name: chat message
    description: Messaging operations
  - name: platform
    description: internal plartorm management
  - name: strings
    description: user-generated string resources management
  - name: lowlevel
    description: user-generated string resources management
  - name: global
    description: global endpoints not bound to specific part of web-site. E.g. search
  - name: discount
    description: Referrals discount operations
  - name: collection
    description: Operations on collections of objects of the same type united by common tags

paths:
  /{proxy+}:
    x-amazon-apigateway-any-method:
      #      x-amazon-apigateway-auth:
      #        type: aws_iam
      #      x-amazon-apigateway-authtype: cognito_user_pools
      #        x-amazon-apigateway-authorizer:
      #          type: cognito_user_pools
      #          providerARNs:
      #            - Fn::ImportValue:
      #                Fn::Sub: "CognitoUserPoolArn-${Environment}"
      produces:
        - application/json
      parameters:
        - name: proxy
          in: path
          required: true
          type: string
      responses: {}
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCorsProxy.Arn}/invocations'
        httpMethod: POST
        type: aws_proxy
  /event:
    post:
      tags:
        - event
      summary: create new event on the platform
      description: ''
      operationId: addEvent
      requestBody:
        required: true
        description: Event parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"event" : $input.json(''$''), "origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaEventCreateNew.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/Invalid'

  /event/search:
    get:
      tags:
        - event
      summary: search for a string in event name
      description: ''
      operationId: getSearchEvents
      parameters:
        - in: query
          name: str
          description: search string
          required: false
          schema:
            type: integer
        - in: query
          name: category
          description: search string
          required: false
          schema:
            type: integer
        - in: query
          name: type
          description: event type filter
          required: false
          schema:
            type: string
            enum:
              - featured
              - regular
              - all
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"str" : "$input.params(''str'')", "origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "category" : "$input.params(''category'')", "type" : "$input.params(''type'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaEventSearch.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/Invalid'

  /event/{eventid}:
    put:
      tags:
        - event
      summary: update event on the platform
      description: ''
      operationId: updateEvent
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Event parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"event" : $input.json(''$''), "origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "eventId" : "$input.params(''eventid'')", "language" : "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaEventUpdateById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/Invalid'
    get:
      tags:
        - event
      summary: get event details
      description: ''
      operationId: getEvent
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "eventId": "$input.params(''eventid'')", "open": false, "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaEventGetById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /open/event/{eventid}:
    get:
      tags:
        - event
      summary: get event details
      description: ''
      operationId: getEvent
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "eventId": "$input.params(''eventid'')", "language": "$input.params(''language'')", "open": true, "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaEventGetById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /open/event/{eventid}/schedule:
    get:
      tags:
        - event
      summary: Get event schedule
      description: Get event schedule. Depending on viewer role, different activities visible. Organizer will get internal event activities, published and activity proposals. Stand owner - internal stand activities, published and proposed to promote. Visitor - published event activities.
      operationId: getEventSchedule
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/pagenumQueryParam'
        - $ref: '#/components/parameters/recordsperpageQueryParam'
        - $ref: '#/components/parameters/activityTypeQueryParam'
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "eventId": "$input.params(''eventid'')", "type": "$input.params(''type'')", "visibilities": ["event_published", "stand_promoted", "stand_internal", "event_timeframe"], "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaEventGetSchedule.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"   
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/Activity'
                  pageNum:
                    type: integer
                  recordsPerPage:
                    type: integer
                  allRecordsNum:
                    type: integer
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /open/event/{eventid}/collections:
    get:
      tags:
        - collection
      summary: return all available collections
      description: ''
      operationId: collectionsGet
      parameters:
        - $ref: '#/components/parameters/eventidParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "entity": "event",
                "entityId": "$input.params('eventid')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCollectionsGet.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/Invalid'
  
  /event/customnameexists/{customname}:
    get:
      tags:
        - event
      summary: check if the custom name for the event is taken
      description: ''
      operationId: customNameAvailabilityCheck 
      parameters:
        - in: path
          name: customname
          description: custom name that has to be checked
          required: true
          schema:
            type: string
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "customName": "$input.params(''customname'')","dataType": "event", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCustomNameAvailabilityCheck.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /event/{eventid}/stands:
    get:
      tags:
        - event
      summary: get stands for given event
      description: ''
      operationId: getEventStands
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - in: query
          name: str
          description: search string
          required: false
          schema:
            type: string
        - in: query
          name: company
          description: company
          required: false
          schema:
            type: string
        - in: query
          name: industry
          description: industry
          required: false
          schema:
            type: string
        - in: query
          name: type
          description: stand type filter
          required: false
          schema:
            type: string
            enum:
              - featured
              - regular
              - all
        - in: query
          name: status
          description: stand status filter
          required: false
          schema:
            type: string
            enum:
              - draft
              - published
              - inactive
              - cancelled
              - all
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "eventId": "$input.params('eventid')",
                "type": "$input.params('type')",
                "status": "$input.params('status')",
                "industry": "$input.params('industry')",
                "str": "$input.params('str')",
                "company": "$input.params('company')",
                "language": "$input.params('language')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaEventGetStands.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/Invalid'

  /open/event/{eventid}/stands:
    get:
      tags:
        - event
      summary: get stands for given event
      description: ''
      operationId: getEventStands
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - in: query
          name: str
          description: search string
          required: false
          schema:
            type: string
        - in: query
          name: company
          description: company
          required: false
          schema:
            type: string
        - in: query
          name: industry
          description: industry
          required: false
          schema:
            type: string
        - in: query
          name: type
          description: stand type filter
          required: false
          schema:
            type: string
            enum:
              - featured
              - regular
              - all
        - in: query
          name: status
          description: stand status filter
          required: false
          schema:
            type: string
            enum:
              - draft
              - published
              - inactive
              - cancelled
              - all
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "eventId": "$input.params('eventid')",
                "type": "$input.params('type')",
                "status": "$input.params('status')",
                "industry": "$input.params('industry')",
                "str": "$input.params('str')",
                "company": "$input.params('company')",
                "language": "$input.params('language')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaEventGetStands.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/Invalid'
  
  /event/{eventid}/publish:
    post:
      tags:
        - event
      summary: send event for moderation
      description: ''
      operationId: publishEvent
      parameters:
        - $ref: '#/components/parameters/eventidParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"eventId" : "$input.params(''eventid'')", "origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email", "domain": "$context.domainName" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaEventPublish.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/Invalid'
  
  /moderation/resolve/{confirmationid}:
    get:
      tags:
        - confirmation
      summary: make a decision on moderated event
      description: ''
      operationId: resolveModeratedEvent
      parameters:
        - in: path
          name: confirmationid
          description: confirmation id
          required: true
          schema:
            type: integer
        - in: path
          name: res
          description: result of moderation
          required: true
          schema:
            type: string
            enum:
              - accept
              - reject
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "confirmationId" : "$input.params(''confirmationid'')", "res" : "$input.params(''res'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email", "domain": "$context.domainName" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaModerationResolve.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/Invalid'
  
  /confirmation/resolve/{confirmationid}:
    get:
      tags:
        - confirmation
      summary: make a decision on confirmation
      description: ''
      operationId: resolveConfirmation
      parameters:
        - in: path
          name: confirmationid
          description: confirmation id
          required: true
          schema:
            type: integer
        - in: query
          name: res
          description: result of confirmation
          required: true
          schema:
            type: string
            enum:
              - accept
              - reject
              - confirm
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "language" : "$input.params(''language'')", "confirmationId" : "$input.params(''confirmationid'')", "res" : "$input.params(''res'')", "allParams" : $input.json(''$''), "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email", "domain": "$context.domainName" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaConfirmationResolve.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/Invalid'

  /event/{eventid}/statistics:
    get:
      tags:
        - event
      summary: get event statistics
      description: ''
      operationId: getEventStatistics
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "eventId" : "$input.params(''eventid'')", "language" : "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaEventGetStatistics.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/Invalid'

  /event/{eventid}/announcement:
    put:
      tags:
        - event
      summary: Update announcement for event
      description: Update announcement for event
      operationId: eventAnnouncementUpdate
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: announcement message text
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventAnnouncement'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
              "language": "$input.params('language')",
              "eventId": "$input.params('eventid')",
              "eventAnnouncement": $input.json('$'),
              "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
              "context": {
                "sub": "$context.authorizer.claims.sub",
                "username": "$context.authorizer.claims['cognito:username']",
                "email": "$context.authorizer.claims.email"
              }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaEventAnnouncementUpdate.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /event/recommended:
    get:
      tags:
        - event
      summary: get events recommendations for user
      description: 'recommendations always consider context:<li>geo<li>user interests<li>bought tickets<li>preferences</li>'
      operationId: getEventRecommendations
      parameters:
        - in: query
          name: category
          description: Key (id) of a category to filter for
          required: false
          schema:
            type: integer
        - $ref: '#/components/parameters/pagenumQueryParam'
        - $ref: '#/components/parameters/recordsperpageQueryParam'
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "category": "$input.params(''category'')", "pageNum": "$input.params(''pageNum'')", "recordsPerPage": "$input.params(''recordsPerPage'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaEventRecommended.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  pageNum:
                    type: integer
                  recordsPerPage:
                    type: integer
                  allRecordsNum:
                    type: integer
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /event/{eventid}/createUploadURL:
    post:
      tags:
        - event
      summary: Generate signed URL for further binary upload
      description: Generate signed URL for further binary upload
      operationId: createEventUploadUrl
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - in: query
          name: relationid
          description: 'Id of the sponsorship relation.'
          required: false
          schema:
            type: integer
        - in: query
          name: url
          description: 'External URL for sponsorship.'
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/uploadcategoryQueryParam'
        - $ref: '#/components/parameters/uploadrefQueryParam'
        - $ref: '#/components/parameters/uploadrefidQueryParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Stand parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Upload'

      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "url": "$input.params('url')",
                "relationId": "$input.params('relationid')",
                "eventId": "$input.params('eventid')",
                "ref": "$input.params('ref')",
                "refId": "$input.params('ref_id')",
                "body": $input.json('$'),
                "language": "$input.params('language')",
                "category": "$input.params('category')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaEventCreateUploadURL.Arn}/invocations'

        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/Invalid'

  /sponsored/{sponsortype}/{sponsorid}:
    get:
      tags:
        - user
      summary: Get events sponsored by user or its company
      operationId: getSponsoredEvents
      parameters:
        - in: path
          name: sponsortype
          description: 'Type of a sponsor'
          required: true
          schema:
            type: string
            enum:
              - user
              - company
        - in: path
          name: sponsorid
          description: 'Id of a sponsor'
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/filterQueryParam'
        - $ref: '#/components/parameters/pagenumQueryParam'
        - $ref: '#/components/parameters/recordsperpageQueryParam'
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "sponsorId": "$input.params(''sponsorid'')", "sponsorType": "$input.params(''sponsortype'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaGetSponsoredEvents.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /event/{eventid}/reps:
    get:
      tags:
        - event
      summary: get all available representatives for a event
      description: ''
      operationId: lambdaGetEventReps
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "eventId": "$input.params('eventid')",
                "language": "$input.params('language')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaGetEventReps.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandRepresentatives'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/Invalid'

  /event/{eventid}/schedule:
    get:
      tags:
        - event
      summary: Get event schedule
      description: Get event schedule. Depending on viewer role, different activities visible. Organizer will get internal event activities, published and activity proposals. Stand owner - internal stand activities, published and proposed to promote. Visitor - published event activities.
      operationId: getEventSchedule
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/pagenumQueryParam'
        - $ref: '#/components/parameters/recordsperpageQueryParam'
        - $ref: '#/components/parameters/activityTypeQueryParam'
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "eventId": "$input.params(''eventid'')", "type": "$input.params(''type'')", "visibilities": ["event_published", "stand_promoted", "stand_internal", "event_timeframe"], "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaEventGetSchedule.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []    
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/Activity'
                  pageNum:
                    type: integer
                  recordsPerPage:
                    type: integer
                  allRecordsNum:
                    type: integer
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /event/{eventid}/editschedule:
    get:
      tags:
        - event
      summary: Get event schedule
      description: Get event schedule for editing. Depending on viewer role, different activities visible. Organizer will get internal event activities, published and activity proposals. Stand owner - internal stand activities, published and proposed to promote. Visitor - published event activities.
      operationId: getEventSchedule
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/pagenumQueryParam'
        - $ref: '#/components/parameters/recordsperpageQueryParam'
        - $ref: '#/components/parameters/activityTypeQueryParam'
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "eventId": "$input.params(''eventid'')", "type": "$input.params(''type'')", "visibilities": ["event_internal", "event_published", "stand_promoted", "cancelled", "event_timeframe"], "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaEventGetSchedule.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/Activity'
                  pageNum:
                    type: integer
                  recordsPerPage:
                    type: integer
                  allRecordsNum:
                    type: integer
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /event/invitation/cancel/{invitationid}:
    post:
      tags:
        - event
      summary: Cancel outgoing invitaion made by company to a stand
      description: cancel outgoing invitaion made by company to a stand
      operationId: cancelInvitationFromCompanyToStand
      parameters:
        - in: path
          name: invitationid
          description: 'Id of invitation.'
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"language": "$input.params(''language'')", "origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "invitationId": "$input.params(''invitationid'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaEventInvitationCancelById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /event/{eventid}/getstandinvitations:
    get:
      tags:
        - event
      summary: Get stand invitations for an event
      description: Get stand invitations for an event
      operationId: getStandInvitationsForEvent
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/pagenumQueryParam'
        - $ref: '#/components/parameters/recordsperpageQueryParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "eventId" : "$input.params(''eventid'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaEventGetStandInvitations.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/StandInvitation'
                  pageNum:
                    type: integer
                  recordsPerPage:
                    type: integer
                  allRecordsNum:
                    type: integer
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /stand:
    post:
      tags:
        - stand
      summary: create new stand on the platform
      description: ''
      operationId: addStand
      requestBody:
        required: true
        description: Stand parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stand'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "stand" : $input.json(''$''), "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStandCreateNew.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stand'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /stand/{standid}:
    put:
      tags:
        - stand
      summary: update stand on the platform
      description: ''
      operationId: updateStand
      parameters:
        - $ref: '#/components/parameters/standidParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Stand parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stand'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "stand" : $input.json(''$''), "standId" : "$input.params(''standid'')", "language" : "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStandUpdateById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      tags:
        - stand
      summary: get stand details
      description: ''
      operationId: getStand
      parameters:
        - $ref: '#/components/parameters/standidParam'
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "standId": "$input.params(''standid'')", "language": "$input.params(''language'')", "open": false, "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStandGetById.Arn}/invocations'
        responses:
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: >-
                #set ($errorMessageObj =
                $util.parseJson($input.path('$.errorMessage'))){ "body" :
                "$errorMessageObj.body", "statusCode" :
                $errorMessageObj.statusCode }
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /open/stand/{standid}:
    get:
      tags:
        - stand
      summary: get stand details
      description: ''
      operationId: getStand
      parameters:
        - $ref: '#/components/parameters/standidParam'
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "standId": "$input.params(''standid'')", "language": "$input.params(''language'')", "open": true, "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStandGetById.Arn}/invocations'
        responses:
          '404':
            statusCode: '404'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: >-
                #set ($errorMessageObj =
                $util.parseJson($input.path('$.errorMessage'))){ "body" :
                "$errorMessageObj.body", "statusCode" :
                $errorMessageObj.statusCode }
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /open/stand/{standid}/schedule:
    get:
      tags:
        - stand
      summary: Get stand schedule
      description: Get stand schedule. Depending on viewer role, different activities visible. Organizer will get internal stand activities, published and activity proposals. Stand owner - internal stand activities, published and proposed to promote. Visitor - published stand activities.
      operationId: getStandSchedule
      parameters:
        - $ref: '#/components/parameters/standidParam'
        - $ref: '#/components/parameters/pagenumQueryParam'
        - $ref: '#/components/parameters/recordsperpageQueryParam'
        - $ref: '#/components/parameters/activityTypeQueryParam'
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "standId": "$input.params(''standid'')", "type": "$input.params(''type'')", "language": "$input.params(''language'')", "visibilities": ["stand_public", "stand_promoted"], "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStandGetSchedule.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/Activity'
                  pageNum:
                    type: integer
                  recordsPerPage:
                    type: integer
                  allRecordsNum:
                    type: integer
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /open/stand/{standid}/collections:
    get:
      tags:
        - collection
      summary: return all available collections
      description: ''
      operationId: collectionsGet
      parameters:
        - $ref: '#/components/parameters/standidParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "entity": "stand",
                "entityId": "$input.params('standid')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCollectionsGet.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/Invalid'

  /stand/invitation/reject/{invitationid}:
    post:
      tags:
        - stand
      summary: Reject incoming invitaion to a stand
      description: Reject incoming invitaion to a stand
      operationId: rejectInvitationToStand
      parameters:
        - in: path
          name: invitationid
          description: 'Id of invitation.'
          required: true
          schema:
            type: integer
        - in: query
          name: reason
          description: 'Reason of rejection.'
          required: false
          schema:
            type: string
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "invitationId": "$input.params(''invitationid'')", "reason": "$input.params(''reason'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStandInvitationRejectById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /stand/invitation/accept/{invitationid}:
    post:
      tags:
        - stand
      summary: Accept incoming invitaion from the company to a stand
      description: Accept incoming invitaion from the company to a stand
      operationId: acceptInvitationToStand
      parameters:
        - in: path
          name: invitationid
          description: 'Id of invitation.'
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "invitationId": "$input.params(''invitationid'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStandInvitationAcceptById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /stand/invitation/{eventid}/{useremail}:
    post:
      tags:
        - stand
      summary: Invite user to a stand
      description: Create an invitation for the user to join the stand
      operationId: inviteUserToStand
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - in: path
          name: useremail
          description: 'User to be invited to the stand.'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Text for the email
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "eventId": "$input.params(''eventid'')", "userEmail": "$input.params(''useremail'')", "text": $input.json(''$''), "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStandInviteUserToEvent.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            text/plain:
              schema:
                type: integer
                format: int32
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /stand/activity/promote/{activityid}:
    post:
      tags:
        - stand
      summary: Propose activity for promotion
      description: Propose activity for promotion
      operationId: standActivityPromote
      parameters:
        - in: path
          name: activityid
          description: 'Id of activity to promote.'
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "activityId": "$input.params(''activityid'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStandActivityPromote.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /stand/activity/acceptpromotion/{activityid}:
    post:
      tags:
        - stand
      summary: Accept proposed activity promotion
      description: Accept proposed activity promotion
      operationId: standActivityResolvePromotion
      parameters:
        - in: path
          name: activityid
          description: 'Id of activity to promote.'
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "activityId": "$input.params(''activityid'')", "visibility": "stand_promoted", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStandActivityResolvePromotion.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /stand/activity/rejectpromotion/{activityid}:
    post:
      tags:
        - stand
      summary: Reject proposed activity promotion
      description: Reject proposed activity promotion
      operationId: standActivityResolvePromotion
      parameters:
        - in: path
          name: activityid
          description: 'Id of activity to promote.'
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "activityId": "$input.params(''activityid'')", "visibility": "stand_rejected", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStandActivityResolvePromotion.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /stand/{standid}/schedule:
    get:
      tags:
        - stand
      summary: Get stand schedule
      description: Get stand schedule. Depending on viewer role, different activities visible. Organizer will get internal stand activities, published and activity proposals. Stand owner - internal stand activities, published and proposed to promote. Visitor - published stand activities.
      operationId: getStandSchedule
      parameters:
        - $ref: '#/components/parameters/standidParam'
        - $ref: '#/components/parameters/pagenumQueryParam'
        - $ref: '#/components/parameters/recordsperpageQueryParam'
        - $ref: '#/components/parameters/activityTypeQueryParam'
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "standId": "$input.params(''standid'')", "type": "$input.params(''type'')", "language": "$input.params(''language'')", "visibilities": ["stand_public", "stand_promoted"], "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStandGetSchedule.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      security:
        - user-pool-cognito: []        
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/Activity'
                  pageNum:
                    type: integer
                  recordsPerPage:
                    type: integer
                  allRecordsNum:
                    type: integer
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /stand/{standid}/editschedule:
    get:
      tags:
        - stand
      summary: Get stand schedule
      description: Get stand schedule for editing. Depending on viewer role, different activities visible. Organizer will get internal stand activities, published and activity proposals. Stand owner - internal stand activities, published and proposed to promote. Visitor - published stand activities.
      operationId: getStandSchedule
      parameters:
        - $ref: '#/components/parameters/standidParam'
        - $ref: '#/components/parameters/pagenumQueryParam'
        - $ref: '#/components/parameters/recordsperpageQueryParam'
        - $ref: '#/components/parameters/activityTypeQueryParam'
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "standId": "$input.params(''standid'')", "type": "$input.params(''type'')", "language": "$input.params(''language'')", "visibilities": ["stand_public", "stand_promoted", "stand_internal", "stand_proposed", "stand_rejected", "cancelled"], "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStandGetSchedule.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/Activity'
                  pageNum:
                    type: integer
                  recordsPerPage:
                    type: integer
                  allRecordsNum:
                    type: integer
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /stand/{standid}/mgmt/{operation}:
    post:
      tags:
        - stand
      summary: Transition stand to a new status
      description: Transition stand to a new status
      operationId: updateStandStatus
      parameters:
        - $ref: '#/components/parameters/standidParam'
        - in: path
          name: operation
          description: one of ticket management operation
          required: true
          schema:
            type: string
            enum:
              - ban
              - unban
              - archive
              - unpublish
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "standId": $input.params('standid'),
                "operation": "$input.params('operation')",
                "language": "$input.params('language')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStandManagementById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /stand/{standid}/materials:
    get:
      tags:
        - stand
      summary: Get stand materials
      description: Get stand materials
      operationId: getStandMaterials
      parameters:
        - $ref: '#/components/parameters/standidParam'
        - $ref: '#/components/parameters/pagenumQueryParam'
        - $ref: '#/components/parameters/recordsperpageQueryParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: $input.json('$')
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStandGetMaterials.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/StandMaterials'
                  pageNum:
                    type: integer
                  recordsPerPage:
                    type: integer
                  allRecordsNum:
                    type: integer
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /event/{eventid}/stand/{standid}/materials:
    get:
      tags:
        - stand
      summary: Get stand materials
      description: Get stand materials
      operationId: getStandMaterials
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/standidParam'
        - $ref: '#/components/parameters/pagenumQueryParam'
        - $ref: '#/components/parameters/recordsperpageQueryParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: $input.json('$')
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStandGetMaterials.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/StandMaterials'
                  pageNum:
                    type: integer
                  recordsPerPage:
                    type: integer
                  allRecordsNum:
                    type: integer
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /stand/{standid}/createUploadURL:
    post:
      tags:
        - stand
      summary: Generate signed URL for stand material upload
      description: Generate signed URL for stand material upload
      operationId: createStandUploadUrl
      parameters:
        - $ref: '#/components/parameters/standidParam'
        - $ref: '#/components/parameters/uploadcategoryQueryParam'
        - $ref: '#/components/parameters/uploadrefQueryParam'
        - $ref: '#/components/parameters/uploadrefidQueryParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Stand parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Upload'

      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "standId": "$input.params('standid')",
                "ref": "$input.params('ref')",
                "refId": "$input.params('ref_id')",
                "body": $input.json('$'),
                "language": "$input.params('language')",
                "category": "$input.params('category')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStandCreateUploadUrl.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/URL'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/Invalid'

  /stand/request/{eventid}:
    post:
      tags:
        - stand
      summary: Request from stand owner to an organizer
      description: Send request from stand owner to an organizer
      operationId: standRequestToOrganizer
      parameters:
        - $ref: '#/components/parameters/eventidParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "event" : $input.json(''$''), "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStandSendRequestToOrganizer.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            text/plain:
              schema:
                type: integer
                format: int32
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /activity:
    post:
      tags:
        - activity
      summary: create new activity on the platform
      description: ''
      operationId: addActivity
      requestBody:
        required: true
        description: Activity parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activity'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "activity" : $input.json(''$''), "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaActivityCreateNew.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /activity/{activityid}:
    put:
      tags:
        - activity
      summary: update activity on the platform
      description: ''
      operationId: updateActivity
      parameters:
        - in: path
          name: activityid
          description: name that need to be updated
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Activity definition object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activity'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "activity" : $input.json(''$''), "activityId" : "$input.params(''activityid'')", "language" : "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaActivityUpdateById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - activity
      summary: delete activity on the platform
      description: ''
      operationId: deleteActivity
      parameters:
        - in: path
          name: activityid
          description: id of the activity that need to be deleted
          required: true
          schema:
            type: integer
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "activityId": "$input.params(''activityid'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaActivityDeleteById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      tags:
        - activity
      summary: get activity details
      description: ''
      operationId: getActivity
      parameters:
        - in: path
          name: activityid
          description: name that need to be updated
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "activityId": "$input.params(''activityid'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaActivityGetById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /activity/{activityid}/meeting:
    post:
      tags:
        - activity
      summary: create a meeting for activity
      description: ''
      operationId: newMeetingForActivity
      parameters:
        - in: path
          name: activityid
          description: activity to attach to
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Meeting definition object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Meeting'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "meeting" : $input.json(''$''), "activityId" : "$input.params(''activityid'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaActivityCreateMeeting.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          description: OK
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meeting'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - activity
      summary: update meeting activity
      description: ''
      operationId: activityUpdateMeeting
      parameters:
        - in: path
          name: activityid
          description: activity to attach to
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Meeting definition object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Meeting'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "meeting" : $input.json(''$''), "activityId" : "$input.params(''activityid'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaActivityUpdateMeeting.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meeting'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      tags:
        - activity
      summary: get activity meeting
      description: ''
      operationId: getActivityGetMeetingById
      parameters:
        - in: path
          name: activityid
          description: name that need to be updated
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "activityId": "$input.params(''activityid'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaActivityGetMeetingById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meeting'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - activity
      summary: delete a meeting from activity
      description: ''
      operationId: deleteMeetingFromActivity
      parameters:
        - in: path
          name: activityid
          description: activity to delete meeting from
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "activityId": "$input.params(''activityid'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaActivityDeleteMeetingById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /activity/customnameexists/{customname}:
    get:
      tags:
        - evactivity
      summary: check if the custom name for the activity is taken
      description: ''
      operationId: customNameAvailabilityCheck 
      parameters:
        - in: path
          name: customname
          description: custom name that has to be checked
          required: true
          schema:
            type: string
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "customName": "$input.params(''customname'')","dataType": "activity", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCustomNameAvailabilityCheck.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /strings:
    post:
      tags:
        - strings
      summary: create a string
      description: ''
      operationId: addString
      requestBody:
        required: true
        description: Strings to add. Should relate to same object (same ref and ref_id)
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Strings'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "strings": $input.json(''$''), "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStringCreateNew.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Strings'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /strings/{stringsid}:
    put:
      tags:
        - strings
      summary: update strings on the platform
      description: ''
      operationId: updateString
      parameters:
        - in: path
          name: stringsid
          description: string that need to be updated
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        description: Strings parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Strings'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "strings": $input.json(''$''), "stringId": "$input.params(''stringsid'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStringUpdateById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Strings'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - strings
      summary: delete string on the platform
      description: ''
      operationId: deleteString
      parameters:
        - in: path
          name: stringsid
          required: true
          description: string that need to be deleted
          schema:
            type: integer
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "stringId": "$input.params(''stringsid'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStringDeleteById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      tags:
        - strings
      summary: get string details
      description: ''
      operationId: getString
      parameters:
        - in: path
          name: stringsid
          description: string that need to be returned
          required: true
          schema:
            type: integer
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "stringId": "$input.params(''stringsid'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStringGetById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /chat/event/{eventid}:
    post:
      tags:
        - chat
      summary: create new chat with event organizer
      description: ''
      operationId: newChatEvent
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Chat parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessage'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "eventId": "$input.params(''eventid'')", "message" : $input.json(''$''), "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaChatCreateForEventNew.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      tags:
        - chat
      summary: get chats for event by type
      description: ''
      operationId: getChatsForEvent
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/filterQueryParam'
        - $ref: '#/components/parameters/pagenumQueryParam'
        - $ref: '#/components/parameters/recordsperpageQueryParam'
        - in: query
          name: type
          description: Type of a chat to fetch
          required: true
          schema:
            type: string
            enum:
              - active
              - pending
              - closed
              - visitor
              - owner
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "language": "$input.params(''language'')", "eventId": "$input.params(''eventid'')", "type": "$input.params(''type'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaChatsGetForEvent.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/Chat'
                  pageNum:
                    type: integer
                  recordsPerPage:
                    type: integer
                  allRecordsNum:
                    type: integer
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /chat/event/{eventid}/archive:
    post:
      tags:
        - chat
      summary: archive all chats for the given event
      description: ''
      operationId: chatArchiveForEvent
      parameters:
        - $ref: '#/components/parameters/eventidParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "eventId": "$input.params(''eventid'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaChatArchiveForEvent.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /chat/stand/{standid}:
    post:
      tags:
        - chat
      summary: create new chat with stand
      description: ''
      operationId: newChatStand
      parameters:
        - $ref: '#/components/parameters/standidParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Chat parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessage'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "standId": "$input.params(''standid'')", "message" : $input.json(''$''), "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaChatCreateForStandNew.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      tags:
        - chat
      summary: get chats for stand by type
      description: ''
      operationId: getChatsForStand
      parameters:
        - $ref: '#/components/parameters/standidParam'
        - $ref: '#/components/parameters/filterQueryParam'
        - $ref: '#/components/parameters/pagenumQueryParam'
        - $ref: '#/components/parameters/recordsperpageQueryParam'
        - in: query
          name: type
          description: Type of a chat to fetch
          required: true
          schema:
            type: string
            enum:
              - active
              - pending
              - closed
              - visitor
              - owner
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "language": "$input.params(''language'')", "standId": "$input.params(''standid'')", "type": "$input.params(''type'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaChatsGetForStand.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/Chat'
                  pageNum:
                    type: integer
                  recordsPerPage:
                    type: integer
                  allRecordsNum:
                    type: integer
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /chat/event/{eventid}/stand/{standid}:
    post:
      tags:
        - chat
      summary: create new chat for event
      description: ''
      operationId: newChatStand
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/standidParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Chat parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessage'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "standId": "$input.params(''standid'')", "eventid": "$input.params(''eventid'')", "message" : $input.json(''$''), "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaChatCreateForEventNew.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      tags:
        - chat
      summary: get chats for event by type
      description: ''
      operationId: getChatsForStand
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/standidParam'
        - $ref: '#/components/parameters/filterQueryParam'
        - $ref: '#/components/parameters/pagenumQueryParam'
        - $ref: '#/components/parameters/recordsperpageQueryParam'
        - in: query
          name: type
          description: Type of a chat to fetch
          required: true
          schema:
            type: string
            enum:
              - active
              - pending
              - closed
              - visitor
              - owner
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "language": "$input.params(''language'')", "standId": "$input.params(''standid'')", "type": "$input.params(''type'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaChatsGetForEvent.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/Chat'
                  pageNum:
                    type: integer
                  recordsPerPage:
                    type: integer
                  allRecordsNum:
                    type: integer
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /chat/user:
    get:
      tags:
        - chat
      summary: get chats for user by type
      description: ''
      operationId: getChatsForUser
      parameters:
        - in: query
          name: type
          description: Type of a chat to fetch
          required: true
          schema:
            type: string
            enum:
              - visitor
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "language": "$input.params(''language'')", "type": "$input.params(''type'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaChatsGetForUser.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /chat/unreadnumber:
    get:
      tags:
        - chat
      summary: get the number of unread messages for the user
      description: ''
      operationId: getChatUnreadForUser
      parameters:
        - in: query
          name: filter
          description: Type of unread to fetch
          required: true
          schema:
            type: string
            enum:
              - visitor
              - eventowner
              - standowner
        - in: query
          name: eventid
          description: Event id, if user is inside event
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "filter": "$input.params('filter')",
                "eventId": "$input.params('eventid')",
                "language": "$input.params('language')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaChatUnreadForUser.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /chat/{chatid}/meeting:
    post:
      tags:
        - chat
      summary: organize a meeting from the chat
      description: ''
      operationId: newMeetingFromChat
      parameters:
        - name: chatid
          in: path
          description: chat id
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Meeting definition object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Meeting'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "meeting" : $input.json(''$''), "chatId" : "$input.params(''chatid'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaChatCreateMeeting.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meeting'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /chat/{chatid}/deactivate:
    post:
      tags:
        - chat
      summary: set chat status as active=false
      description: ''
      operationId: deactivateChat
      parameters:
        - name: chatid
          in: path
          description: chat id
          required: true
          schema:
            type: string
        - name: unassign
          in: query
          description: should we unassign it instead of deactivate
          required: false
          schema:
            type: string
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "chatSid": "$input.params('chatid')",
                "unassign": "$input.params('unassign')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaChatDeactivate.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /chat/{chatid}/assign:
    post:
      tags:
        - chat
      summary: assign chat to me
      description: ''
      operationId: chatAssign
      parameters:
        - name: chatsid
          in: path
          description: chat id
          required: true
          schema:
            type: string
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "chatSid": "$input.params(''chatid'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaChatAssign.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /chat/{chatid}/assign/{personnelId}:
    post:
      tags:
        - chat
      summary: assign chat to user
      description: ''
      operationId: chatAssignToPersonnel
      parameters:
        - name: chatid
          in: path
          description: chat sid
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/useridParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "chatSid": "$input.params(''chatid'')", "personnelId": "$input.params(''personnelId'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaChatAssignToPersonnel.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /chat/webhook/{environment}/onMessageSent:
    post:
      tags:
        - chat
      summary: fires on every message sent to any chat channel
      description: ''
      operationId: chatWebhookOnMessageSent
      parameters:
        - in: path
          name: environment
          description: 'Environment, where web hook should be processed (dev/prod etc.)'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        description: New chat message
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessage'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/x-www-form-urlencoded: '{"message": "$util.escapeJavaScript($input.body)", "env": "$input.params(''environment'')"}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaChatWebhookOnMessageSent.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /chat/{chatid}/updateLastConsumedMessageIndex/{index}:
    post:
      tags:
        - chat
      summary: update last read message index for the given user
      description: ''
      operationId: chatUpdateLastConsumedMessageIndex
      parameters:
        - name: chatid
          in: path
          description: chat id
          required: true
          schema:
            type: integer
        - name: index
          in: path
          description: index of last read message
          required: true
          schema:
            type: integer
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "chatId": "$input.params(''chatid'')", "index": "$input.params(''index'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaChatUpdateLastConsumedMessageIndex.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /user/confirm:
    post:
      tags:
        - user
      summary: confirm user registration
      description: ''
      operationId: userConfirmRegistration
      requestBody:
        required: true
        description: user registration confirmation params
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationConfirmationParams'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "params" : $input.json(''$''), "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaUserConfirmRegistration.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /user/{userid}:
    get:
      tags:
        - user
      summary: Get user by id
      description: ''
      operationId: getUserById
      parameters:
        - $ref: '#/components/parameters/useridParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"userId": "$input.params(''userid'')", "origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email", "domain": "$context.domainName" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaUserGetById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/useridParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "user" : $input.json(''$''), "userId" : "$input.params(''userid'')", "language" : "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaUserUpdateById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /user/{userid}/createUploadURL:
    post:
      tags:
        - user
      summary: Generate signed URL for further user branding upload
      description: Generate signed URL for further user branding upload
      operationId: createUserUploadUrl
      parameters:
        - $ref: '#/components/parameters/useridParam'
        - $ref: '#/components/parameters/uploadcategoryQueryParam'
        - $ref: '#/components/parameters/uploadrefQueryParam'
        - $ref: '#/components/parameters/uploadrefidQueryParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Upload parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Upload'

      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
              "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
              "userId": "$input.params('userid')",
              "ref": "$input.params('ref')",
              "refId": "$input.params('ref_id')",
              "body": $input.json('$'),
              "language": "$input.params('language')",
              "category": "$input.params('category')",
              "context": {
                "sub": "$context.authorizer.claims.sub",
                "username": "$context.authorizer.claims['cognito:username']",
                "email": "$context.authorizer.claims.email"
              }
            }

        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaUserCreateUploadURL.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/Invalid'

  /user/mystands:
    get:
      tags:
        - user
      summary: Get owned stands
      description: get stands owned by the user filtered
      operationId: getStandsForUser
      parameters:
        - $ref: '#/components/parameters/filterQueryParam'
        - $ref: '#/components/parameters/pagenumQueryParam'
        - $ref: '#/components/parameters/recordsperpageQueryParam'
        - in: query
          name: datestart
          description: Date filter for events
          required: false
          schema:
            type: string
        - in: query
          name: dateend
          description: Date filter for events
          required: false
          schema:
            type: string
        - in: query
          name: category
          description: Date filter for events
          required: false
          schema:
            type: string
        - in: query
          name: type
          description: event type filter
          required: false
          schema:
            type: string
            enum:
              - featured
              - regular
              - all
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "filter": "$input.params(''filter'')", "dateStart": "$input.params(''datestart'')", "dateEnd": "$input.params(''dateend'')", "category": "$input.params(''category'')", "type": "$input.params(''type'')", "pageNum": "$input.params(''pageNum'')", "recordsPerPage": "$input.params(''recordsPerPage'')", "language": "$input.params(''language'')", "category": "$input.params(''category'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaUserGetOwnedStands.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/Stand'
                  pageNum:
                    type: integer
                  recordsPerPage:
                    type: integer
                  allRecordsNum:
                    type: integer
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /user/mymeetings:
    get:
      tags:
        - user
      summary: Get my meetings
      description: get my meetings
      operationId: getMeetingsForUser
      parameters:
        - in: query
          name: datestart
          description: Date filter for events
          required: false
          schema:
            type: string
        - in: query
          name: dateend
          description: Date filter for events
          required: false
          schema:
            type: string
        - in: query
          name: type
          description: event type filter
          required: false
          schema:
            type: string
            enum:
              - all
              - past
              - coming
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "dateStart": "$input.params(''datestart'')", "dateEnd": "$input.params(''dateend'')", "type": "$input.params(''type'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaUserGetMeetings.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /user/getstandinvitations:
    get:
      tags:
        - user
      summary: Get stand invitations for user
      description: Get stand invitations for user
      operationId: getStandInvitationsForUser
      parameters:
        - $ref: '#/components/parameters/pagenumQueryParam'
        - $ref: '#/components/parameters/recordsperpageQueryParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaUserGetStandInvitations.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/StandInvitation'
                  pageNum:
                    type: integer
                  recordsPerPage:
                    type: integer
                  allRecordsNum:
                    type: integer
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /user/customfields:
    get:
      tags:
        - user
      summary: Get custom fields for the user profile with definitions
      operationId: getUserCustomFields
      parameters:
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaUserCustomFields.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /user/myinvitations:
    get:
      tags:
        - user
      summary: Get all invitations for user in one place
      description: get events created by the user filtered
      operationId: getUserInvitations
      parameters:
        - in: query
          name: userid
          description: user id override if needed
          required: false
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "userId": "$input.params('userid')",
                "language": "$input.params('language')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaUserGetInvitations.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '405':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /user/myevents:
    get:
      tags:
        - user
      summary: Get events created by user
      description: get events created by the user filtered
      operationId: getEventsForUser
      parameters:
        - $ref: '#/components/parameters/filterQueryParam'
        - $ref: '#/components/parameters/pagenumQueryParam'
        - $ref: '#/components/parameters/recordsperpageQueryParam'
        - in: query
          name: type
          description: Type of events to select
          required: true
          schema:
            type: string
            enum:
              - visitor
              - organizer
        - in: query
          name: datestart
          description: Date filter for events
          required: false
          schema:
            type: string
        - in: query
          name: dateend
          description: Date filter for events
          required: false
          schema:
            type: string
        - in: query
          name: category
          description: Date filter for events
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "type": "$input.params(''type'')", "category": "$input.params(''category'')", "dateStart": "$input.params(''datestart'')", "dateEnd": "$input.params(''dateend'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaUserGetEvents.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  pageNum:
                    type: integer
                  recordsPerPage:
                    type: integer
                  allRecordsNum:
                    type: integer
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /role:
    get:
      tags:
        - role
      summary: Get roles for entity
      description: ''
      operationId: getRoleByType
      parameters:
        - in: query
          name: type
          description: 'Entity to filter on.'
          required: true
          schema:
            type: string
            enum:
              - company
              - event
              - stand
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "type": "$input.params(''type'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaRoleGetByType.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /invitation/cancel/{confirmationid}:
    post:
      tags:
        - company
      summary: Cancel sent personnel invitation
      description: Cancel sent personnel invitation
      operationId: cancelSentPersonnelInvitation
      parameters:
        - in: path
          name: confirmationid
          description: 'Id of confirmation for the invitation sent.'
          required: true
          schema:
            type: integer
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "confirmationId": "$input.params(''confirmationid'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaUserPersonnelInvitationCancel.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /company/removeuser/{userid}:
    post:
      tags:
        - company
      summary: Remove user from the company
      description: Remove user from the company
      operationId: removeUserFromCompany
      parameters:
        - $ref: '#/components/parameters/useridParam'
      requestBody:
        required: true
        description: Reason of user removal.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "userId": "$input.params(''userid'')", "reason": $input.json(''$''), "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCompanyRemoveUser.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /company/{companyid}/resign:
    post:
      tags:
        - company
      summary: Resign from a given company
      description: Resign from a given company
      operationId: companyResign
      parameters:
        - $ref: '#/components/parameters/companyidParam'
      requestBody:
        required: false
        description: Reason of user resignation.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "companyId": "$input.params(''companyid'')", "reason": $input.json(''$''), "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCompanyResign.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /company/{companyid}:
    get:
      tags:
        - company
      summary: Get company profile
      description: Get company profile
      operationId: getCompanyProfile
      parameters:
        - $ref: '#/components/parameters/companyidParam'
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"companyId": "$input.params(''companyid'')", "language": "$input.params(''language'')", "origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email", "domain": "$context.domainName" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCompanyGetProfile.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - company
      summary: update company
      description: ''
      operationId: updateCompany
      parameters:
        - $ref: '#/components/parameters/companyidParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Company parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "company" : $input.json(''$''), "companyId" : "$input.params(''companyid'')", "language" : "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCompanyUpdateById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /event/{eventid}/personnel/{personnelid}:
    put:
      tags:
        - personnel
      summary: Update personnel for the event
      description: Update personnel for the event
      operationId: updatePersonnelForEvent
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - in: path
          name: personnelid
          description: 'Personnel to be removed.'
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Details for personnel record. JSON including useremail, roleid, position, text.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonnelUpdate'

      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
              "language": "$input.params('language')",
              "type": "event",
              "typeId": "$input.params('eventid')",
              "personnelId": "$input.params('personnelid')",
              "userEmail": "$input.path('$.useremail')",
              "name": "$input.path('$.username')",
              "public": $input.path('$.public'),
              "pricing": $input.path('$.price'),
              "roleId": "$input.path('$.roleid')",
              "position": "$input.path('$.position')",
              "tags": $input.path('$.tags'),
              "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
              "context": {
                "sub": "$context.authorizer.claims.sub",
                "username": "$context.authorizer.claims['cognito:username']",
                "email": "$context.authorizer.claims.email"
              }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaPersonnelUpdateById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - personnel
      summary: Remove personnel from the event
      description: Remove personnel from the event
      operationId: removePersonnelFromEvent
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - in: path
          name: personnelid
          description: 'Personnel to be removed.'
          required: true
          schema:
            type: integer
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "domain": "$context.domainName",
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "personnelId": "$input.params('personnelid')",
                "type": "event",
                "typeId": "$input.params('eventid')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaPersonnelDeleteById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /event/{eventid}/personnel:
    get:
      tags:
        - event
      summary: Get personnel for the event
      description: Get personnel for the event
      operationId: getPersonnelForEvent
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - in: query
          name: str
          description: search string
          required: false
          schema:
            type: integer
        - in: query
          name: roleid
          description: role to filter on
          required: false
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "eventId": "$input.params('eventid')",
                "str": "$input.params('str')",
                "roleId": "$input.params('roleid')",
                "language": "$input.params('language')",
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email",
                    "domain": "$context.domainName"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaEventGetPersonnel.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags:
        - event
      summary: Invite external user to an event.
      description: Create a personnel record in the event. When email present, registers user in the personnel.
      operationId: inviteExternalUserToEvent
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Details for personnel record. JSON including useremail, roleid, position, text.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonnelUpdate'

      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
              "language": "$input.params('language')",
              "type": "event",
              "typeId": "$input.params('eventid')",
              "userEmail": "$input.path('$.useremail')",
              "name": "$input.path('$.username')",
              "public": $input.path('$.public'),
              "roleId": "$input.path('$.roleid')",
              "position": "$input.path('$.position')",
              "tags": $input.path('$.tags'),
              "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
              "context": {
                "sub": "$context.authorizer.claims.sub",
                "username": "$context.authorizer.claims['cognito:username']",
                "email": "$context.authorizer.claims.email"
              }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaPersonnelCreateNew.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/Invalid'
        '409':
          $ref: '#/components/responses/Conflict'

  /stand/{standid}/personnel/{personnelid}:
    put:
      tags:
        - personnel
      summary: Update personnel for the stand
      description: Update personnel for the stand
      operationId: updatePersonnelForStand
      parameters:
        - $ref: '#/components/parameters/standidParam'
        - in: path
          name: personnelid
          description: 'Personnel to be removed.'
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Details for personnel record. JSON including useremail, roleid, position, text.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonnelUpdate'

      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
              "language": "$input.params('language')",
              "type": "stand",
              "typeId": "$input.params('standid')",
              "personnelId": "$input.params('personnelid')",
              "userEmail": "$input.path('$.useremail')",
              "name": "$input.path('$.username')",
              "public": $input.path('$.public'),
              "pricing": $input.path('$.price'),
              "roleId": "$input.path('$.roleid')",
              "position": "$input.path('$.position')",
              "tags": $input.path('$.tags'),
              "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
              "context": {
                "sub": "$context.authorizer.claims.sub",
                "username": "$context.authorizer.claims['cognito:username']",
                "email": "$context.authorizer.claims.email"
              }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaPersonnelUpdateById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - personnel
      summary: Remove personnel from the stand
      description: Remove personnel from the stand
      operationId: removePersonnelFromStand
      parameters:
        - $ref: '#/components/parameters/standidParam'
        - in: path
          name: personnelid
          description: 'Personnel to be removed.'
          required: true
          schema:
            type: integer
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "personnelId": "$input.params('personnelid')",
                "type": "stand",
                "typeId": "$input.params('standid')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaPersonnelDeleteById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'


  /stand/{standid}/personnel:
    get:
      tags:
        - stand
      summary: Get personnel for the stand
      description: Get personnel for the stand
      operationId: getPersonnelForStand
      parameters:
        - $ref: '#/components/parameters/standidParam'
        - in: query
          name: str
          description: search string
          required: false
          schema:
            type: integer
        - in: query
          name: roleid
          description: role to filter on
          required: false
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "standId": "$input.params('standid')",
                "str": "$input.params('str')",
                "roleId": "$input.params('roleid')",
                "language": "$input.params('language')",
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email",
                    "domain": "$context.domainName"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStandGetPersonnel.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags:
        - event
      summary: Invite external user to a stand.
      description: Create a personnel record in the stand. When email present, registers user in the personnel.
      operationId: inviteExternalUserToStand
      parameters:
        - $ref: '#/components/parameters/standidParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Details for personnel record. JSON including useremail, roleid, position, text.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonnelUpdate'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
              "language": "$input.params('language')",
              "type": "stand",
              "typeId": "$input.params('standid')",
              "userEmail": "$input.path('$.useremail')",
              "name": "$input.path('$.username')",
              "public": $input.path('$.public'),
              "roleId": "$input.path('$.roleid')",
              "position": "$input.path('$.position')",
              "tags": $input.path('$.tags'),
              "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
              "context": {
                "sub": "$context.authorizer.claims.sub",
                "username": "$context.authorizer.claims['cognito:username']",
                "email": "$context.authorizer.claims.email"
              }
            }

        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaPersonnelCreateNew.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/Invalid'
        '409':
          $ref: '#/components/responses/Conflict'

  /company/{companyid}/personnel:
    get:
      tags:
        - company
      summary: Get company personnel
      description: Get company personnel
      operationId: getCompanyPersonnel
      parameters:
        - $ref: '#/components/parameters/companyidParam'
        - in: query
          name: str
          description: search string
          required: false
          schema:
            type: integer
        - in: query
          name: roleid
          description: role to filter on
          required: false
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"companyId": "$input.params(''companyid'')", "str": "$input.params(''str'')", "roleId": "$input.params(''roleid'')", "language": "$input.params(''language'')", "origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email", "domain": "$context.domainName" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCompanyGetPersonnel.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /company/{companyid}/createUploadURL:
    post:
      tags:
        - company
      summary: Generate signed URL for further company branding upload
      description: Generate signed URL for further company branding upload
      operationId: createCompanyUploadUrl
      parameters:
        - $ref: '#/components/parameters/companyidParam'
        - $ref: '#/components/parameters/uploadcategoryQueryParam'
        - $ref: '#/components/parameters/uploadrefQueryParam'
        - $ref: '#/components/parameters/uploadrefidQueryParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Upload parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Upload'

      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "companyId": "$input.params('companyid')",
                "ref": "$input.params('ref')",
                "refId": "$input.params('ref_id')",
                "body": $input.json('$'),
                "language": "$input.params('language')",
                "category": "$input.params('category')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCompanyCreateUploadURL.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/Invalid'

  /company/{companyid}/invitation:
    post:
      tags:
        - company
      summary: Invite user to a company
      description: Create an invitation to the user
      operationId: inviteUserToCompany
      parameters:
        - $ref: '#/components/parameters/companyidParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Details for invitation. JSON including useremail, roleid, position, text.
        content:
          application/json:
            schema:
              type: object
              required:
                - useremail
                - roleid
                - position
                - text
              properties:
                useremail:
                  type: string
                  description: 'User to be invited to the company.'
                roleid:
                  type: string
                  description: 'Initial role for the user.'
                position:
                  type: string
                  description: 'Job position of the user.'
                text:
                  type: string
                  description: 'Text for the email.'

      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
              "companyId": "$input.params('companyid')",
              "language": "$input.params('language')",
              "userEmail": "$input.path('$.useremail')",
              "text": "$input.path('$.text')",
              "roleId": "$input.path('$.roleid')",
              "position": "$input.path('$.position')",
              "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
              "context": {
                "sub": "$context.authorizer.claims.sub",
                "username": "$context.authorizer.claims['cognito:username']",
                "email": "$context.authorizer.claims.email"
              }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCompanyInviteUser.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/Invalid'
        '409':
          description: Already exist

  /company/upgrade/{userid}/{roleid}:
    put:
      tags:
        - company
      summary: Upgrade user role in the company
      description: Set new role to the user
      operationId: updateUserRole
      parameters:
        - $ref: '#/components/parameters/useridParam'
        - in: path
          name: roleid
          description: 'New role for the user.'
          required: true
          schema:
            type: integer
        - in: query
          name: position
          description: 'New position for the user.'
          required: false
          schema:
            type: integer
        - in: query
          name: public
          description: 'is personnel visible to visitors'
          required: false
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
              "language": "$input.params('language')",
              "userId": "$input.params('userid')",
              "position": "$input.params('position')",
              "roleId": "$input.params('roleid')",
              "public": "$input.params('public')",
              "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
              "context": {
                "sub": "$context.authorizer.claims.sub",
                "username": "$context.authorizer.claims['cognito:username']",
                "email": "$context.authorizer.claims.email"
              }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCompanyUpdateUserRole.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /company/event/{eventid}/{userid}/{roleid}:
    post:
      tags:
        - company
      summary: Assign user for the event with a given role
      description: Assign user for the event with a given role
      operationId: companyAssignUserToEventWithRole
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/useridParam'
        - in: path
          name: roleid
          description: 'New role for the user.'
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"eventId": "$input.params(''eventid'')", "userId": "$input.params(''userid'')", "roleId": "$input.params(''roleid'')", "language": "$input.params(''language'')", "origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCompanyAssignUserToEventWithRole.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /company/stand/{standid}/{userid}/{roleid}:
    post:
      tags:
        - company
      summary: Assign user for the stand with a given role
      description: Assign user for the stand with a given role
      operationId: companyAssignUserToStandWithRole
      parameters:
        - $ref: '#/components/parameters/standidParam'
        - $ref: '#/components/parameters/useridParam'
        - in: path
          name: roleid
          description: 'New role for the user.'
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"standId": "$input.params(''standid'')", "userId": "$input.params(''userid'')", "roleId": "$input.params(''roleid'')", "language": "$input.params(''language'')", "origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCompanyAssignUserToStandWithRole.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /company/event/{eventid}/stand/{standid}/{userid}/{roleid}:
    post:
      tags:
        - company
      summary: Assign user for the stand with a given role
      description: Assign user for the stand with a given role
      operationId: companyAssignUserToStandWithRole
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/standidParam'
        - $ref: '#/components/parameters/useridParam'
        - in: path
          name: roleid
          description: 'New role for the user.'
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"standId": "$input.params(''standid'')", "userId": "$input.params(''userid'')", "roleId": "$input.params(''roleid'')", "language": "$input.params(''language'')", "origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCompanyAssignUserToStandWithRole.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /binary/{id}:
    delete:
      tags:
        - binary
      summary: Delete upload
      description: Delete upload
      operationId: deleteUpload
      parameters:
        - in: path
          name: id
          description: Id of the upload
          required: true
          schema:
            type: integer
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "id": "$input.params(''id'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaBinaryDeleteById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - binary
      summary: Update binary tags
      description: Update binary tags
      operationId: updateUpload
      parameters:
        - in: path
          name: id
          description: Id of the upload
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        description: Upload parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Upload'

      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "id": "$input.params('id')",
                "body": $input.json('$'),
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaBinaryUpdateById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: [ ]
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /binary/downloadURL/{id}:
    get:
      tags:
        - binary
      summary: Get download URL by binary id
      description: ''
      operationId: getDownloadUrlById
      parameters:
        - in: path
          name: id
          description: Id of the binary
          required: true
          schema:
            type: integer
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "id": "$input.params(''id'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaEventGetUploadURL.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/URL'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /report/downloadURL:
    get:
      tags:
        - reports
      summary: Get download URL for given report (see query params)
      description: ''
      operationId: getReportDownloadUrl
      parameters:
        - in: query
          name: path
          description: Path to the report
          required: true
          schema:
            type: string
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "path": "$input.params(''path'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaReportGetDownloadURL.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /activity/{activityid}/downloadURL:
    get:
      tags:
        - reports
      summary: Get download URL for given report (see query params)
      description: ''
      operationId: getReportDownloadUrl
      parameters:
        - in: header
          name: activityId
          description: Id or custom name of the activity
          required: true
          schema:
            type: string
        - in: query
          name: path
          description: Path to the activity record
          required: true
          schema:
            type: string
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "path": "$input.params(''path'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaActivityGetDownloadURL.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /dict:
    get:
      tags:
        - dict
      summary: Get dictionary entries by type
      description: ''
      operationId: getDictEntriesFiltered
      parameters:
        - in: query
          name: type
          description: type of items to return
          required: true
          schema:
            type: string
            enum:
              - category
              - timezone
              - language
              - country
        - in: query
          name: ignorelanguage
          description: ignore fintering by language
          required: false
          schema:
            type: boolean
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "type" : "$input.params(''type'')", "ignoreLanguage" : "$input.params(''ignorelanguage'')", "language" : "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaDictionaryGet.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                type: array
                items:
                  format: string
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /lowlevel:
    post:
      tags:
        - lowlevel
      summary: create new record
      description: ''
      operationId: addLowlevel
      requestBody:
        required: true
        description: Lowlevel definition object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{ "method": "$context.httpMethod", "body" : $input.json(''$''), "headers": {  #foreach($param in $input.params().header.keySet())  "$param": "$util.escapeJavaScript($input.params().header.get($param))" #if($foreach.hasNext),#end  #end }, "queryParams": {  #foreach($param in $input.params().querystring.keySet())  "$param": "$util.escapeJavaScript($input.params().querystring.get($param))" #if($foreach.hasNext),#end #end }, "pathParams": {  #foreach($param in $input.params().path.keySet())  "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end  #end } }'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaLowlevelPost.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
        httpMethod: POST
        type: aws
      security:
        - user-pool-cognito:
            - tex-api/lowlevel
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: You are not entitled to create stands
        '405':
          description: Invalid input

  /feedback:
    post:
      tags:
        - feedback
      summary: feedback frmprocessing
      description: ''
      operationId: addFeedback
      requestBody:
        required: true
        description: Feedback definition object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{ "origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "body" : $input.json(''$'') }'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaFeedbackPost.Arn}/invocations'
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '405':
          $ref: '#/components/responses/Invalid'

  /resizeimage/{proxy+}:
    x-amazon-apigateway-any-method:
      #      x-amazon-apigateway-auth:
      #        type: aws_iam
      #      x-amazon-apigateway-authtype: cognito_user_pools
      #        x-amazon-apigateway-authorizer:
      #          type: cognito_user_pools
      #          providerARNs:
      #            - Fn::ImportValue:
      #                Fn::Sub: "CognitoUserPoolArn-${Environment}"
      produces:
        - application/json
      parameters:
        - name: proxy
          in: path
          required: true
          type: string
      responses: {}
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaResizeImage.Arn}/invocations'
        httpMethod: POST
        type: aws_proxy

  /ticket:
    post:
      tags:
        - ticket
      summary: create new ticket
      description: ''
      operationId: addTicket
      requestBody:
        required: true
        description: Ticket parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "ticket" : $input.json(''$''), "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaTicketCreateNew.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /ticket/{ticketid}/mgmt/{operation}:
    post:
      tags:
        - ticket
      summary: update ticket
      description: ''
      operationId: lambdaTicketManagementById
      parameters:
        - in: path
          name: ticketid
          description: id of the ticket that need to be updated
          required: true
          schema:
            type: integer
        - in: path
          name: operation
          description: one of ticket management operation
          required: true
          schema:
            type: string
            enum:
              - ban
              - unban
              - cancel
              - refund
              - approve
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "ticketId": "$input.params('ticketid')",
                "operation": "$input.params('operation')",
                "language": "$input.params('language')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaTicketManagementById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /billing/event/{eventid}/pricing:
    get:
      tags:
        - billing
      summary: Get all pricing records for a given event
      operationId: pricingGetAll
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/pagenumQueryParam'
        - $ref: '#/components/parameters/recordsperpageQueryParam'
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "eventId": "$input.params(''eventid'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaPricingGetAll.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventPricing'
                  pageNum:
                    type: integer
                  recordsPerPage:
                    type: integer
                  allRecordsNum:
                    type: integer
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - billing
      summary: Create new pricing for the event
      operationId: pricingCreateNew
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Event pricing parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventPricing'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "pricing": $input.json('$'),
                "eventId": "$input.params('eventid')",
                "language": "$input.params('language')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaPricingCreateNew.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventPricing'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - billing
      summary: update pricing for event
      description: ''
      operationId: pricingUpdate
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Pricing parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventPricing'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "pricing": $input.json('$'),
                "eventId": "$input.params('eventid')",
                "language": "$input.params('language')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaPricingUpdate.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventPricing'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /billing/event/{eventid}/pricing/{pricingid}:
    delete:
      tags:
        - billing
      summary: delete pricing of the event
      description: ''
      operationId: pricingDeleteById
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/pricingidParam'
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "pricingId" : "$input.params(''pricingid'')", "eventId" : "$input.params(''eventid'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaPricingDeleteById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventPricing'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/Invalid'


  /billing/event/{eventid}/ticket:
    post:
      tags:
        - billing
      summary: Buy the user a ticket
      operationId: ticketCreateNew
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Ticket parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"ticket" : $input.json(''$''), "origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "eventId": "$input.params(''eventid'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaTicketCreateNew.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /event/{eventid}/attendees:
    get:
      tags:
        - event
      summary: Get all users, who bought a ticket to a given event
      operationId: eventGetAttendees
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/pagenumQueryParam'
        - $ref: '#/components/parameters/recordsperpageQueryParam'
        - in: query
          name: searchby
          description: email or name to search for
          required: false
          schema:
            type: string
        - in: query
          name: status
          description: filter by status
          required: false
          schema:
            type: string
            enum:
              - banned
              - payed
              - not_payed
              - cancelled
              - refunded
              - archived
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "searchBy": "$input.params('searchby')",
                "recordsPerPage": "$input.params('recordsPerPage')",
                "pageNum": "$input.params('pageNum')",
                "eventId": "$input.params('eventid')",
                "status": "$input.params('status')",
                "language": "$input.params('language')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaEventGetAttendees.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - event tickets
      summary: upload tickets to system in CSV
      description: ''
      operationId: eventUploadAttendees
      parameters:
        - $ref: '#/components/parameters/eventidParam'

      x-amazon-apigateway-binary-media-types: [ "application/octet", "text/csv", "text/plain", "multipart/form-data" ]
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        contentHandling: CONVERT_TO_TEXT
        passthroughBehavior: when_no_templates
        requestTemplates:
          text/csv: >
            {
              "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
              "text": "$util.escapeJavaScript($input.body)",
              "eventId": "$input.params('eventid')",
              "language": "$input.params('language')",
              "context": {
                "sub": "$context.authorizer.claims.sub",
                "username": "$context.authorizer.claims['cognito:username']",
                "email": "$context.authorizer.claims.email"
              }
            }
          multipart/form-data: >
            {
              "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
              "text": "$util.escapeJavaScript($input.body)",
              "eventId": "$input.params('eventid')",
              "language": "$input.params('language')",
              "context": {
                "sub": "$context.authorizer.claims.sub",
                "username": "$context.authorizer.claims['cognito:username']",
                "email": "$context.authorizer.claims.email"
              }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaEventTicketsUploadCsv.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'


  /billing/tier/{tierid}/pricing:
    get:
      tags:
        - billing
      summary: Get actual pricing for a given tier
      operationId: getPricingForTier
      parameters:
        - in: path
          name: tierid
          description: 'Id of the tier.'
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "tierId": "$input.params(''tierid'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaTierGetPricing.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /paypal:
    post:
      tags:
        - payment stub
      summary: stub for the payment gateway
      description: ''
      operationId: processPayment
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: $input.json('$')
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaProcessPayment.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /chat/token:
    get:
      tags:
        - chat
      summary: Get chat token
      operationId: getChatToken
      parameters:
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaChatGetToken.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /open/articles/{entitytype}/{entityid}:
    get:
      tags:
        - news
      summary: Get articles by criteria
      operationId: articlesGet
      parameters:
        - in: path
          name: entitytype
          description: one of ['stand', 'event', 'company']
          required: true
          schema:
            type: string
        - in: path
          name: entityid
          description: Id of entity (stand/event/company)
          required: true
          schema:
            type: integer
        - in: query
          name: status
          description: one of ['draft', 'published', 'deleted']. If not provided - returns published
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/pagenumQueryParam'
        - $ref: '#/components/parameters/recordsperpageQueryParam'
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "open": true, "language": "$input.params(''language'')", "entityType": "$input.params(''entitytype'')", "entityId": "$input.params(''entityid'')", "status": "$input.params(''status'')", "pageNum": "$input.params(''pageNum'')", "recordsPerPage": "$input.params(''recordsPerPage'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArticlesGet.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /articles/{entitytype}/{entityid}:
    get:
      tags:
        - news
      summary: Get articles by criteria
      operationId: articlesGet
      parameters:
        - in: path
          name: entitytype
          description: one of ['stand', 'event', 'company']
          required: true
          schema:
            type: string
        - in: path
          name: entityid
          description: Id of entity (stand/event/company)
          required: true
          schema:
            type: integer
        - in: query
          name: status
          description: one of ['draft', 'published', 'deleted']. If not provided - returns published
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/pagenumQueryParam'
        - $ref: '#/components/parameters/recordsperpageQueryParam'
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "language": "$input.params(''language'')", "entityType": "$input.params(''entitytype'')", "entityId": "$input.params(''entityid'')", "status": "$input.params(''status'')", "pageNum": "$input.params(''pageNum'')", "recordsPerPage": "$input.params(''recordsPerPage'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArticlesGet.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /open/article/{articleid}:
    get:
      tags:
        - news
      summary: Get article by id
      operationId: articleGetById
      parameters:
        - in: path
          name: articleid
          description: Id of the article
          required: true
          schema:
            type: integer
        - in: query
          name: forEditing
          description: if true - returns full metadata, in no - partial (for viewing)
          required: false
          schema:
            type: boolean
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "open": true, "forEditing": "$input.params(''forEditing'')", "language": "$input.params(''language'')", "articleId": "$input.params(''articleid'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArticleGetById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'         
  
  /open/discount/{discountCode}:
    get:
      tags:
        - discount
      summary: Get discount by HASH (id)
      operationId: discountGetById
      parameters:
        - in: path
          name: discountCode
          description: Id of the discount type:varchar(32)
          required: true
          schema:
            type: string
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "open": true,
                "discountCode": "$input.params('discountCode')",
                "data": $input.json('$'),
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaDiscountGetById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/Invalid'               
  
  /article/{articleid}:
    get:
      tags:
        - news
      summary: Get article by id
      operationId: articleGetById
      parameters:
        - in: path
          name: articleid
          description: Id of the article
          required: true
          schema:
            type: integer
        - in: query
          name: forEditing
          description: if true - returns full metadata, in no - partial (for viewing)
          required: false
          schema:
            type: boolean
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "forEditing": "$input.params(''forEditing'')", "language": "$input.params(''language'')", "articleId": "$input.params(''articleid'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArticleGetById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - news
      summary: delete article
      description: ''
      operationId: articleDeleteById
      parameters:
        - in: path
          name: articleid
          required: true
          description: id of the article to delete
          schema:
            type: integer
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "articleId": "$input.params(''articleid'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArticleDeleteById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/Invalid'
    put:
      tags:
        - news
      summary: Update an article
      operationId: articleUpdateById
      parameters:
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: News parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/News'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"article" : $input.json(''$''), "articleId": "$input.params(''articleid'')", "origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArticleUpdateById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /article:
    post:
      tags:
        - news
      summary: Create new article
      operationId: articleCreateNew
      parameters:
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: News parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/News'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"article" : $input.json(''$''), "origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArticleCreateNew.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /activitystream/{entitytype}/{entityid}:
    get:
      tags:
        - activitystream
      summary: Get activity stream for entity
      operationId: activityStreamGetForEntity
      parameters:
        - in: path
          name: entitytype
          description: Entity, that is parent to the activity
          required: true
          schema:
            type: string
            enum:
              - event
              - stand
        - in: path
          name: entityid
          description: id of the entity
          required: true
          schema:
            type: integer
        - in: query
          name: expanded
          description: if we should return just top 5 (false - default) or all (true)
          required: false
          schema:
            type: boolean
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "entityType": "$input.params(''entitytype'')", "entityId": "$input.params(''entityid'')", "expanded": "$input.params(''expanded'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaActivityStreamGetForEntity.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /activitystream/cleanup/{eventid}:
    get:
      tags:
        - activitystream
      summary: Cleanup activity stream on event archivation
      operationId: activityStreamCleanupForEvent
      parameters:
        - $ref: '#/components/parameters/eventidParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "eventId": "$input.params(''eventid'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaActivityStreamCleanupForEvent.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /tier:
    post:
      tags:
        - sponsorship
      summary: Create new sponsorship tier
      operationId: tierCreateNew
      parameters:
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Tier parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tier'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"tier" : $input.json(''$''), "origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaTierCreateNew.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tier'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - sponsorship
      summary: Update sponsorship tier
      operationId: tierUpdate
      parameters:
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Tier parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tier'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"tier" : $input.json(''$''), "origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaTierUpdate.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tier'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /event/{eventid}/tiers:
    get:
      tags:
        - sponsorship
      summary: Get tiers for the event
      operationId: tiersGetForEvent
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "eventId": "$input.params(''eventid'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaTiersGetForEvent.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /event/{eventid}/tiers/{tierid}:
    post:
      tags:
        - sponsorship
      summary: Buy sponsorship for the event and given tier
      operationId: eventBuySponsorship
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - in: path
          name: tierid
          description: id of the tier
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "eventId": "$input.params(''eventid'')", "tierId": "$input.params(''tierid'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaEventBuySponsorship.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /event/{eventid}/visitor/tiers:
    get:
      tags:
        - sponsorship
      summary: Get tiers for the event (visitor view)
      operationId: tiersGetForEventAsVisitor
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "eventId": "$input.params(''eventid'')", "visitor": true, "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaTiersGetForEvent.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /event/{eventid}/promos:
    get:
      tags:
        - sponsorship
      summary: Get sponsorship data for a given page
      operationId: eventPageGetPromos
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - in: query
          name: placeids
          description: ids of the event page
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "eventId": "$input.params(''eventid'')", "placeIds": "$input.params(''placeids'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaEventPageGetPromos.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /sponsor/{relationid}/view/{placeid}:
    post:
      tags:
        - sponsorship
      summary: Record promo view for a user
      operationId: sponsorshipRecordView
      parameters:
        - $ref: '#/components/parameters/relationidParam'
        - in: path
          name: placeid
          description: id of the place of the promo
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "placeId": "$input.params(''placeid'')", "relationId": "$input.params(''relationid'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaSponsorshipRecordView.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /sponsor/{relationid}:
    put:
      tags:
        - sponsorship
      summary: Update information on sponsorship relation
      operationId: sponsorshipUpdateData
      parameters:
        - $ref: '#/components/parameters/relationidParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Relation parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Relation'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "relation" : $input.json(''$''), "referer": "$util.escapeJavaScript($input.params().header.get(''referer''))", "relationId": "$input.params(''relationid'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaSponsorshipUpdateData.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /sponsor/{relationid}/action/{placeid}:
    get:
      tags:
        - sponsorship
      summary: >
        Get action data for different placeids. For banner that will be redirect to sponsorship resources.
        For other places - their configurations.
      operationId: sponsorshipGetActionData
      parameters:
        - $ref: '#/components/parameters/relationidParam'
        - in: path
          name: placeid
          description: id of the event page
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "placeId": "$input.params(''placeid'')", "referer": "$util.escapeJavaScript($input.params().header.get(''referer''))", "relationId": "$input.params(''relationid'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaSponsorshipGetActionData.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - sponsorship
      summary: Delete information from sponsorship relation
      operationId: sponsorshipDeleteData
      parameters:
        - $ref: '#/components/parameters/relationidParam'
        - in: path
          name: placeid
          description: id of the event page
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "placeId": "$input.params(''placeid'')", "referer": "$util.escapeJavaScript($input.params().header.get(''referer''))", "relationId": "$input.params(''relationid'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaSponsorshipDeleteData.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/Invalid'
    put:
      tags:
        - sponsorship
      summary: record action for specified placeholder, lottery and survey supported
      operationId: sponsorshipRecordAction
      parameters:
        - $ref: '#/components/parameters/relationidParam'
        - in: path
          name: placeid
          description: id of the event page
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Parametrized input, depending on placeholder type. prizeId for lottery, survey object for survey.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "placeId": "$input.params('placeid')",
                "referer": "$util.escapeJavaScript($input.params().header.get('referer'))",
                "relationId": "$input.params('relationid')",
                "data": $input.json('$'),
                "language": "$input.params('language')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaSponsorshipRecordAction.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/Invalid'

  /sponsor/{relationid}/refund:
    post:
      tags:
        - sponsorship
      summary: Request for a refund
      operationId: sponsorshipRequestRefund
      parameters:
        - $ref: '#/components/parameters/relationidParam'
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: '{"origin": "$util.escapeJavaScript($input.params().header.get(''origin''))", "relationId": "$input.params(''relationid'')", "language": "$input.params(''language'')", "context" : { "sub" : "$context.authorizer.claims.sub", "username" : "$context.authorizer.claims[''cognito:username'']", "email" : "$context.authorizer.claims.email" }}'
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaSponsorshipRequestRefund.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/Invalid'


  /event/{eventid}/collection:
    post:
      tags:
        - collection
      summary: Create new collection
      description: ''
      operationId: collectionCreateNew
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Stand parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionCreate'

      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "entity": "event",
                "entityId": "$input.params('eventid')",
                "collection": $input.json('$'),
                "language": "$input.params('language')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCollectionCreateNew.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/Invalid'

  /event/{eventid}/collections:
    get:
      tags:
        - collection
      summary: return all available collections
      description: ''
      operationId: collectionsGet
      parameters:
        - $ref: '#/components/parameters/eventidParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "entity": "event",
                "entityId": "$input.params('eventid')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCollectionsGet.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/Invalid'

  /event/{eventid}/collection/{collectionid}:
    put:
      tags:
        - collection
      summary: Update collection tags
      description: ''
      operationId: collectionUpdateById
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/collectionidParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Collection parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "entity": "event",
                "entityId": "$input.params('eventid')",
                "collectionId": "$input.params('collectionid')",
                "collection": $input.json('$'),
                "language": "$input.params('language')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCollectionUpdateById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/Invalid'
    delete:
      tags:
        - collection
      summary: delete collection from event
      description: ''
      operationId: collectionDeleteById
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/collectionidParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "entity": "event",
                "entityId": "$input.params('eventid')",
                "collectionId": "$input.params('collectionid')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCollectionDeleteById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      tags:
        - collection
      summary: return collection by id
      description: ''
      operationId: collectionGetById
      parameters:
        - $ref: '#/components/parameters/eventidParam'
        - $ref: '#/components/parameters/collectionidParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "entity": "event",
                "entityId": "$input.params('eventid')",
                "collectionId": "$input.params('collectionid')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCollectionGetById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/Invalid'


  /stand/{standid}/collection:
    post:
      tags:
        - collection
      summary: Create new collection
      description: ''
      operationId: collectionCreateNew
      parameters:
        - $ref: '#/components/parameters/standidParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Stand parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionCreate'

      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "entity": "stand",
                "entityId": "$input.params('standid')",
                "collection": $input.json('$'),
                "language": "$input.params('language')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCollectionCreateNew.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/Invalid'

  /stand/{standid}/collections:
    get:
      tags:
        - collection
      summary: return all available collections
      description: ''
      operationId: collectionsGet
      parameters:
        - $ref: '#/components/parameters/standidParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "entity": "stand",
                "entityId": "$input.params('standid')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCollectionsGet.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/Invalid'

  /stand/{standid}/collection/{collectionid}:
    put:
      tags:
        - collection
      summary: Update collection tags
      description: ''
      operationId: collectionUpdateById
      parameters:
        - $ref: '#/components/parameters/standidParam'
        - $ref: '#/components/parameters/collectionidParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Collection parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "entity": "stand",
                "entityId": "$input.params('standid')",
                "collectionId": "$input.params('collectionid')",
                "collection": $input.json('$'),
                "language": "$input.params('language')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCollectionUpdateById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/Invalid'
    delete:
      tags:
        - collection
      summary: delete collection from event
      description: ''
      operationId: collectionDeleteById
      parameters:
        - $ref: '#/components/parameters/standidParam'
        - $ref: '#/components/parameters/collectionidParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "entity": "stand",
                "entityId": "$input.params('standid')",
                "collectionId": "$input.params('collectionid')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCollectionDeleteById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      tags:
        - collection
      summary: return collection by id
      description: ''
      operationId: collectionGetById
      parameters:
        - $ref: '#/components/parameters/standidParam'
        - $ref: '#/components/parameters/collectionidParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "entity": "stand",
                "entityId": "$input.params('standid')",
                "collectionId": "$input.params('collectionid')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaCollectionGetById.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      security:
        - user-pool-cognito: []        
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/Invalid'

#===============================
#STAND
  /stand/{standid}/reps:
    get:
      tags:
        - stand
      summary: get all available representatives for a stand
      description: ''
      operationId: lambdaGetStandReps
      parameters:
        - $ref: '#/components/parameters/standidParam'
        - $ref: '#/components/parameters/languageParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "standId": "$input.params('standid')",
                "language": "$input.params('language')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStandGetReps.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandRepresentatives'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/Invalid'

  /stand/{standid}/meeting:
    post:
      tags:
        - stand
      summary: create a meeting request from visitor to stand rep
      description: ''
      operationId: standCreateMeeting
      parameters:
        - $ref: '#/components/parameters/standidParam'
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Stand parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StandMeeting'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "meeting": $input.json('$'),
                "standId": "$input.params('standid')",
                "language": "$input.params('language')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStandCreateMeeting.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          $ref: '#/components/responses/Invalid'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/Invalid'

  /stand/{standid}/meeting/{activityid}:
    put:
      tags:
        - stand
      summary: Confirm stand meeting
      description: ''
      operationId: standConfirmMeeting
      parameters:
        - $ref: '#/components/parameters/standidParam'
        - in: path
          name: activityid
          description: activity id of the stand meeting to be Confirmed
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/languageParam'
      requestBody:
        required: true
        description: Stand parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StandMeeting'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "meeting": $input.json('$'),
                "standId": "$input.params('standid')",
                "activityId": "$input.params('activityid')",
                "language": "$input.params('language')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStandConfirmMeeting.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/Invalid'
    delete:
      tags:
        - stand
      summary: delete meeting on the platform
      description: ''
      operationId: standCancelMeeting
      parameters:
        - $ref: '#/components/parameters/standidParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "meeting": $input.json('$'),
                "standId": "$input.params('standid')",
                "activityId": "$input.params('activityid')",
                "language": "$input.params('language')",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaStandCancelMeeting.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/Invalid'
        '404':
          $ref: '#/components/responses/NotFound'

  /search/global:
    get:
      tags:
        - global
      summary: search for a string in event name
      description: ''
      operationId: getSearchGlobal
      parameters:
        - in: query
          name: q
          description: search string
          required: true
          schema:
            type: string
        - in: query
          name: scope
          description: scope definition all|event|stand|company|article|agenda|personnel, default all
          required: false
          schema:
            type: string
            enum:
              - all
              - event
              - stand
              - company
              - article
              - agenda
              - personnel
        - in: query
          name: start
          description: start index, default 0
          required: false
          schema:
            type: integer
        - in: query
          name: size
          description: page number, default 0
          required: false
          schema:
            type: integer
        - in: query
          name: eventid
          description: event number to filter in
          required: false
          schema:
            type: integer
        - $ref: '#/components/parameters/standidQueryParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "str": "$input.params('q')",
                "scope": "$input.params('scope')",
                "start": "$input.params('start')",
                "size": "$input.params('size')",
                "eventId": "$input.params('eventid')",
                "standId": "$input.params('standid')",
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaSearchGet.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/Invalid'

  /search/{eventid}:
    get:
      tags:
        - global
      summary: search for a string in event name
      description: ''
      operationId: getSearchGlobal
      parameters:
        - in: query
          name: q
          description: search string
          required: true
          schema:
            type: string
        - in: query
          name: scope
          description: scope definition, default all
          required: false
          schema:
            type: string
            enum:
              - all
              - stand
              - article
              - agenda
              - personnel
        - in: query
          name: start
          description: start index, default 0
          required: false
          schema:
            type: integer
        - in: query
          name: size
          description: page number, default 0
          required: false
          schema:
            type: integer
        - $ref: '#/components/parameters/standidQueryParam'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "str": "$input.params('q')",
                "scope": "$input.params('scope')",
                "start": "$input.params('start')",
                "size": "$input.params('size')",
                "eventId": "$input.params('eventid')",
                "standId": "$input.params('standid')",
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaSearchGet.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/Invalid'

  /search/reindex:
    post:
      tags:
        - global
      summary: initiate reindex sequence
      description: ''
      operationId: postSearchReindex
      parameters:
        - in: query
          name: scope
          description: scope definition all|event|stand|company|article|agenda|personnel, default all
          required: false
          schema:
            type: string
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "scope": "$input.params('scope')",
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "context": {
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaSearchReindex.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - user-pool-cognito: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/Invalid'

  /webhook/messengerpeople/47de3e71-2e5e-4c04-a4be-dd8c89b9e400:
    post:
      tags:
        - global
      summary: initiate reindex sequence
      description: ''
      operationId: postSearchReindex
      parameters:
        - in: query
          name: scope
          description: scope definition all|event|stand|company|article|agenda|personnel, default all
          required: false
          schema:
            type: string
      requestBody:
        required: true
        description: Webhook infoStand parameters object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StandMeeting'
      x-amazon-apigateway-integration:
        credentials:
          'Fn::Sub': '${ApiGatewayAccessRole.Arn}'
        requestTemplates:
          application/json: >
            {
                "scope": "$input.params('scope')",
                "origin": "$util.escapeJavaScript($input.params().header.get('origin'))",
                "request": $input.json('$'),
                "context": {
                    "stringKey": "$context.authorizer.stringKey",
                    "sub": "$context.authorizer.claims.sub",
                    "username": "$context.authorizer.claims['cognito:username']",
                    "email": "$context.authorizer.claims.email"
                }
            }
        uri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaMessengerPeopleWebhook.Arn}/invocations'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        httpMethod: POST
        type: aws
      x-amazon-apigateway-cors:
        allowOrigins:
          - "*"
      security:
        - messengerpeople: []
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/Invalid'

#====================================================================
#--------------------------------------------------------------------
components:
  securitySchemes:
    messengerpeople:
      type: apiKey
      scheme: bearer
      bearerFormat: predefined
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: messengerpeople type
      x-amazon-apigateway-authorizer:
        type: token
        authorizerCredentials:
          'Fn::Sub': 'arn:aws:iam::${AWS::AccountId}:role/api-gateway-authoriser-messengerpeople-role-${Environment}-${AWS::Region}'
#          'Fn::Sub': '${AuthorizerInvokationRole.Arn}'
        identitySource: method.request.header.Authorization
        authorizerUri:
          'Fn::Sub': 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaMessengerPeopleAuthorizer.Arn}/invocations'
        authorizerPayloadFormatVersion: "2.0"
        enableSimpleResponses: false
        authorizerResultTtlInSeconds: 300

    user-pool-cognito:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - Fn::ImportValue:
              Fn::Sub: "CognitoUserPoolArn-${Environment}"
  #----------------------------------------------------------

  parameters:
    languageParam:
      in: header
      name: language
      description: selected language
      required: false
      schema:
        type: string
    eventidParam:
      in: path
      name: eventid
      description: 'Id of the event.'
      required: true
      schema:
        type: string
    standidParam:
      in: path
      name: standid
      description: 'Stand id'
      required: true
      schema:
        type: integer
    useridParam:
      in: path
      name: userid
      description: 'Id of the user.'
      required: true
      schema:
        type: integer
    pricingidParam:
      in: path
      name: pricingid
      description: 'id of the pricing'
      required: true
      schema:
        type: integer
    standidQueryParam:
      in: query
      name: standid
      description: 'Stand id'
      required: false
      schema:
        type: integer
    collectionidParam:
      in: path
      name: collectionid
      description: id of the collection to be Updated
      required: true
      schema:
        type: integer
    companyidParam:
      in: path
      name: companyid
      description: 'Id of the company.'
      required: true
      schema:
        type: integer
    recordsperpageQueryParam:
      in: query
      name: recordsPerPage
      description: Number of records per page to return. Defaults to returning 10 records
      required: false
      schema:
        type: integer
    pagenumQueryParam:
      in: query
      name: pageNum
      description: Number of the page to return. 0-based. Defaults to 0
      required: false
      schema:
        type: integer
    activityTypeQueryParam:
      in: query
      name: type
      description: Type of acitivity to fetch
      required: false
      schema:
        type: string
        enum:
          - agenda
          - working_schedule
    uploadrefQueryParam:
      in: query
      name: ref
      description: 'entity type for reference while creating upload URL.'
      required: false
      schema:
        type: string
        enum:
          - news
          - collection
          - activity
          - binary
          - sponsor
          - personnel
    uploadrefidQueryParam:
      in: query
      name: ref_id
      description: 'Id of the referenced entity.'
      required: false
      schema:
        type: integer
    uploadcategoryQueryParam:
      in: query
      name: category
      description: 'Category of the upload. One of branding/binary/video/news/sponsor. Defaults to binary.'
      required: false
      schema:
        type: string
        enum:
          - branding
          - binary
          - video
          - news
          - sponsor
    relationidParam:
      in: path
      name: relationid
      description: id of sponsorship relation (returned with the sponsors request)
      required: true
      schema:
        type: string
        
    filterQueryParam:
      in: query
      name: filter
      description: Filters than need to be applied
      required: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: string
  #----------------------------------------------------------

  responses:
    Success:
      description: OK
      headers:
        Access-Control-Allow-Headers:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Origin:
          schema:
            type: string

    Forbidden:
      description: You are not entitled to update events
      headers:
        Access-Control-Allow-Headers:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Origin:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'

    NotFound:
      description: Not found
      headers:
        Access-Control-Allow-Headers:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Origin:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'

    Invalid:
      description: Invalid input
      headers:
        Access-Control-Allow-Headers:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Origin:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'

    Conflict:
      description: Conflict on resource creation. Possible duplication
      headers:
        Access-Control-Allow-Headers:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Origin:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
#----------------------------------------------------------
  schemas:
    User:
      type: object
      description: 'User in the system'
      properties:
        id:
          type: integer
          description: 'Unique user identifier (automatically generated)'
        name:
          type: string
          description: 'First name of a user'
        surname:
          type: string
          description: 'Last name of a user'
        timezone:
          type: number
          description: 'GMT offset the stands operates. example: -8.0. Can be from -15 to 15 exclusively.'
        email:
          type: string
          description: 'User e-mail address'
        status:
          type: string
          description: 'User lifecycle status'
          enum:
            - incomplete
            - active
            - blocked
            - cancelled
            - anonymized
        lastActive:
          type: integer
          description: 'Timestamp of last activity in GMT0'
        company:
          type: integer
          description: 'Id of user company, if any'
        role:
          type: integer
          description: 'Id of user role in a company or system, if any'
        tags:
          description: tags of interest for a user
          type: array
          items:
            type: string
    Event:
      type: object
      required:
        - dateStart
        - dateEnd
        - timezone
        - language
      properties:
        id:
          type: integer
        dateStart:
          type: string
          description: 'ISO date and time string, no timezone. example: 2020-10-01T10:00:00'
        dateEnd:
          type: string
          description: 'ISO date and time string, no timezone. example: 2020-10-01T10:00:00'
        timezone:
          type: number
          description: 'GMT offset the stands operates. example: -8.0'
        company:
          type: integer
          description: 'Id of organizer, if any'
        tags:
          description: tags of interest for an event. Source for a recommendation
          type: array
          items:
            type: string
        status:
          type: string
          description: event lifecycle status
          enum:
            - draft
            - active
            - inactive
            - cancelled
            - demo
        standMaterials:
          description: stand materials for the event except for branding
          type: array
          items:
            $ref: '#/components/schemas/StandMaterials'
        branding:
          description: branding for the event
          type: array
          items:
            $ref: '#/components/schemas/StandMaterials'
        strings:
          description: strings associated with the event (with respect to selected language)
          type: array
          items:
            $ref: '#/components/schemas/Strings'
    Stand:
      type: object
      required:
        - name
        - timezone
        - language
      properties:
        id:
          type: integer
        timezone:
          type: number
          description: 'GMT offset the stands operates. example: -8.0'
        language:
          type: string
          description: 'ISO default stand language, example: en_US'
        company:
          type: integer
          description: Id of stand owner
        eventId:
          type: integer
          description: Id of event
        tags:
          description: tags of interest for an stand. Source for a recommendation
          type: array
          items:
            type: string
        status:
          type: string
          description: stand lifecycle status
          enum:
            - draft
            - published
            - inactive
            - cancelled
            - template
        standMaterials:
          description: stand materials for the stand except for branding
          type: array
          items:
            $ref: '#/components/schemas/StandMaterials'
        branding:
          description: branding for the stand
          type: array
          items:
            $ref: '#/components/schemas/StandMaterials'
        strings:
          description: strings associated with the stand (with respect to selected language)
          type: array
          items:
            $ref: '#/components/schemas/Strings'
    Activity:
      type: object
      required:
        - name
        - dateStart
        - dateEnd
        - timezone
      properties:
        id:
          type: integer
        stand:
          type: integer
          description: 'Id of stand, null if event-level activity'
        event:
          type: integer
          description: 'Id of event'
        meeting:
          type: integer
          description: 'Id of a meeting'
        start:
          type: string
          description: 'ISO date and time string, no timezone, example: 2020-10-01T10:00:00'
        end:
          type: string
          description: 'ISO date and time string, no timezone. example: 2020-10-01T10:00:00'
        timezone:
          type: number
          description: 'GMT offset the stands operates, example: -8.0'
        value:
          type: string
        visibility:
          type: string
          description: visibility of an activity
          enum:
            - stand_internal
            - stand_public
            - stand_proposed
            - stand_promoted
            - stand_rejected
            - event_internal
            - event_published
            - event_timeframe
            - cancelled
            - private_meeting
            - visitor_proposed
        creator:
          type: integer
        tags:
          description: tags of interest for an stand. Source for a recommendation
          type: array
          items:
            type: string
        strings:
          description: strings associated with the activity (with respect to selected language)
          type: array
          items:
            $ref: '#/components/schemas/Strings'

    Chat:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
        name:
          type: string
        standId:
          type: integer
          format: int32
          description: 'Id of stand, null if event-level activity'
        eventId:
          type: integer
          description: Id of event
        userFromId:
          type: integer
          format: int32
          description: Id of initiator person
        userToId:
          type: integer
          description: Id of active response person
        startDate:
          type: string
          description: time of start in GMT+0
        closeDate:
          type: string
          description: time of end in GMT+0
    ChatMessage:
      type: object
      required:
        - text
      properties:
        id:
          type: integer
        value:
          type: string
        chatId:
          type: integer
          description: Id of chat
        timestamp:
          type: integer
          description: message timestamp
        isRead:
          type: boolean
          description: did receiver read that?

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
        type:
          type: string
        message:
          type: string
    Empty:
      type: object
      description: empty schema
    UserRegistrationConfirmationParams:
      type: object
      required:
        - code
        - userName
        - clientId
      properties:
        code:
          type: integer
          format: int32
        userName:
          type: string
        clientId:
          type: string
    Role:
      type: object
      required:
        - name
        - grants
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        grants:
          type: string
    EventType:
      type: string
      enum:
        - organized
        - accessible
    StandInvitation:
      type: object
      properties:
        id:
          type: integer
          format: int32
        standPerson:
          type: integer
          format: int32
          description: Id of person at stand
        eventOrganizer:
          type: integer
          format: int32
          description: Id of event organizer
        standOwnerOk:
          type: boolean
        eventOrganizerOk:
          type: boolean
    Company:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        email:
          type: string
        website:
          type: string
        tags:
          type: string
    Strings:
      type: object
      properties:
        id:
          type: integer
          format: int32
        ref:
          type: string
          enum:
            - stand
            - event
            - company
            - user
            - role
            - activity
            - capability
            - dictionary
            - upload
            - pricing
            - stand_invitation
            - user_invitation
            - personnel_invitation
            - meeting
            - news
            - tier
            - relation
        ref_id:
          type: integer
          format: int32
        category:
          type: string
          enum:
            - description_short
            - description_long
            - about
            - name
        language:
          type: string
        value:
          type: string
        is_default:
          type: boolean
    StandMaterials:
      type: object
      properties:
        id:
          type: integer
          format: int32
        stand:
          type: integer
          format: int32
        event:
          type: integer
          format: int32
        uploader:
          type: integer
          format: int32
        uploaded:
          type: string
          format: date-time
        lastAccessed:
          type: string
          format: date-time
        url:
          type: string
        tags:
          type: string
    Meeting:
      type: object
      properties:
        id:
          type: integer
          format: int32
        url:
          type: string
        chat:
          type: integer
          format: int32
    Capability:
      type: object
      properties:
        id:
          type: integer
          format: int32
        event:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
    URL:
      type: object
      properties:
        url:
          type: string
    Email:
      type: object
      properties:
        text:
          type: string
    EventPricing:
      type: object
      properties:
        id:
          type: integer
          format: int32
        pricing_plan:
          type: string
          enum:
            - split_stand_price
            - split_ticket_price
            - upfront_cost
            - free
        access_price:
          type: number
        access_currency:
          type: string
        quantity:
          type: integer
          format: int32
        tags:
          type: array
          items:
            type: string
    Ticket:
      type: object
      properties:
        id:
          type: integer
          format: int32
        buyer:
          type: integer
          format: int32
        stand:
          type: integer
          format: int32
        pricing:
          $ref: '#/components/schemas/EventPricing'
        date_action:
          type: string
        payment_status:
          type: string
          enum:
            - payed
            - not_payed
            - cancelled
            - refunded
    Tier:
      type: object
      properties:
        id:
          type: integer
          format: int32
        is_enabled:
          type: boolean
        default_id:
          type: integer
          format: int32
        logo:
          type: string
        pricing:
          type: integer
          format: int32
        event:
          type: integer
          format: int32
        switches:
          type: string
    Relation:
      type: object
      properties:
        id:
          type: integer
          format: int32
        object_ref:
          type: string
        object_ref_id:
          type: integer
          format: int32
        operation:
          type: string
        subject_ref:
          type: string
        subject_ref_id:
          type: integer
          format: int32
        parameter:
          type: string
    News:
      type: object
      properties:
        id:
          type: integer
          format: int32
        event:
          type: integer
          format: int32
        stand:
          type: integer
          format: int32
        company:
          type: integer
          format: int32
        editor:
          type: integer
          format: int32
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - draft
            - published
            - deleted
        content_type:
          type: string
          enum:
            - article
            - announcement
        strings:
          type: array
          items:
            type: string
        images:
          type: array
          items:
            type: string

    StandMeeting:
      type: object
      required:
        - stand
        - visibility
      properties:
        id:
          type: integer
        stand:
          type: integer
          description: 'Id of stand, null if event-level activity'
        event:
          type: integer
          description: 'Id of event'
        meeting:
          type: integer
          description: 'Id of a meeting'
        start:
          type: string
          description: 'ISO date and time string, no timezone, example: 2020-10-01T10:00:00'
        end:
          type: string
          description: 'ISO date and time string, no timezone. example: 2020-10-01T10:00:00'
        timezone:
          type: number
          description: 'GMT offset the stands operates, example: -8.0'
        value:
          type: string
        visibility:
          type: string
          description: visibility of an activity
          enum:
            - private_meeting
            - visitor_proposed
        visitor:
          type: integer
        representative:
          type: integer
          description: person to request
        strings:
          description: strings associated with the activity (with respect to selected language)
          type: array
          items:
            $ref: '#/components/schemas/Strings'

    StandPersonnel:
      type: object
      required:
        - id
        - name
        - role
      description: 'Limited user visibility for stand viewer'
      properties:
        id:
          type: integer
          description: 'Unique user identifier (automatically generated)'
        name:
          type: string
          description: 'First name of a user'
        surname:
          type: string
          description: 'Last name of a user'
        role:
          type: integer
          description: 'Id of user role in a company or system, if any'

    StandRepresentatives:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/StandPersonnel'

    Upload:
      type: object
      required:
        - filename
      description: 'body of upload request'
      properties:
        description:
          type: string
          description: 'long upload description'
        titul:
          type: string
          description: 'upload name'
        filename:
          type: string
          description: 'upload filename'
        tags:
          type: array
          description: 'upload tags'
          items:
            type: string

    CollectionCreate:
      type: object
      required:
        - ref
        - tags
      properties:
        customname:
          type: string
        ref:
          type: string
        tags:
          type: array
          items:
            type: string

    Collection:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int32
        customname:
          type: string
        ref:
          type: string
          enum:
            - user
            - activity
            - stand
            - binary
        tags:
          type: array
          items:
            type: string

    EventAnnouncement:
      type: object
      properties:
        text:
          type: string

    PersonnelUpdate:
      type: object
      required:
        - roleid
        - position
        - public
        - tags
      properties:
        useremail:
          type: string
          description: 'Real user email if it should be mapped to real person'
        roleid:
          type: string
          description: 'Role for the personnel.'
        position:
          type: string
          description: 'Job position of the personnel.'
        username:
          type: string
          description: 'Name of the personnel.'
        tags:
          type: array
          items:
            format: string
          description: 'tags of the personnel'
        public:
          type: boolean
          description: 'is it the public person'

externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
